In archive libavrrtoslib.a:

heap_2.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .text.pvPortMalloc 00000124  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  4 .text.vPortFree 00000058  00000000  00000000  00000158  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  5 .text.xPortGetFreeHeapSize 0000000a  00000000  00000000  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.vPortInitialiseBlocks 00000002  00000000  00000000  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .bss.xHeapHasBeenInitialised.2022 00000001  00000000  00000000  000001bc  2**0
                  ALLOC
  8 .data.xFreeBytesRemaining 00000002  00000000  00000000  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss.xEnd     00000004  00000000  00000000  000001be  2**0
                  ALLOC
 10 .bss.xStart   00000004  00000000  00000000  000001be  2**0
                  ALLOC
 11 .bss.ucHeap   000005dc  00000000  00000000  000001be  2**0
                  ALLOC
 12 .comment      00000012  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY

Disassembly of section .text.pvPortMalloc:

00000000 <pvPortMalloc>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	0e 94 00 00 	call	0	; 0x0 <pvPortMalloc>
   e:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  12:	81 11       	cpse	r24, r1
  14:	00 c0       	rjmp	.+0      	; 0x16 <pvPortMalloc+0x16>
  16:	80 e0       	ldi	r24, 0x00	; 0
  18:	90 e0       	ldi	r25, 0x00	; 0
  1a:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
  1e:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  22:	10 92 00 00 	sts	0x0000, r1	; 0x800000 <__SREG__+0x7fffc1>
  26:	10 92 00 00 	sts	0x0000, r1	; 0x800000 <__SREG__+0x7fffc1>
  2a:	8b ed       	ldi	r24, 0xDB	; 219
  2c:	95 e0       	ldi	r25, 0x05	; 5
  2e:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
  32:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  36:	10 92 00 00 	sts	0x0000, r1	; 0x800000 <__SREG__+0x7fffc1>
  3a:	10 92 00 00 	sts	0x0000, r1	; 0x800000 <__SREG__+0x7fffc1>
  3e:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
  42:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  46:	80 e0       	ldi	r24, 0x00	; 0
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
  4e:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  52:	81 e0       	ldi	r24, 0x01	; 1
  54:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  58:	20 97       	sbiw	r28, 0x00	; 0
  5a:	01 f0       	breq	.+0      	; 0x5c <pvPortMalloc+0x5c>
  5c:	24 96       	adiw	r28, 0x04	; 4
  5e:	ce 01       	movw	r24, r28
  60:	01 97       	sbiw	r24, 0x01	; 1
  62:	8a 3d       	cpi	r24, 0xDA	; 218
  64:	95 40       	sbci	r25, 0x05	; 5
  66:	00 f0       	brcs	.+0      	; 0x68 <pvPortMalloc+0x68>
  68:	00 c0       	rjmp	.+0      	; 0x6a <pvPortMalloc+0x6a>
  6a:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  6e:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  72:	a0 e0       	ldi	r26, 0x00	; 0
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	82 81       	ldd	r24, Z+2	; 0x02
  78:	93 81       	ldd	r25, Z+3	; 0x03
  7a:	8c 17       	cp	r24, r28
  7c:	9d 07       	cpc	r25, r29
  7e:	00 f0       	brcs	.+0      	; 0x80 <pvPortMalloc+0x80>
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	e0 30       	cpi	r30, 0x00	; 0
  84:	f2 07       	cpc	r31, r18
  86:	01 f4       	brne	.+0      	; 0x88 <pvPortMalloc+0x88>
  88:	00 c0       	rjmp	.+0      	; 0x8a <pvPortMalloc+0x8a>
  8a:	20 81       	ld	r18, Z
  8c:	31 81       	ldd	r19, Z+1	; 0x01
  8e:	21 15       	cp	r18, r1
  90:	31 05       	cpc	r19, r1
  92:	01 f0       	breq	.+0      	; 0x94 <pvPortMalloc+0x94>
  94:	df 01       	movw	r26, r30
  96:	f9 01       	movw	r30, r18
  98:	00 c0       	rjmp	.+0      	; 0x9a <pvPortMalloc+0x9a>
  9a:	0d 91       	ld	r16, X+
  9c:	1c 91       	ld	r17, X
  9e:	11 97       	sbiw	r26, 0x01	; 1
  a0:	0c 5f       	subi	r16, 0xFC	; 252
  a2:	1f 4f       	sbci	r17, 0xFF	; 255
  a4:	20 81       	ld	r18, Z
  a6:	31 81       	ldd	r19, Z+1	; 0x01
  a8:	2d 93       	st	X+, r18
  aa:	3c 93       	st	X, r19
  ac:	8c 1b       	sub	r24, r28
  ae:	9d 0b       	sbc	r25, r29
  b0:	89 30       	cpi	r24, 0x09	; 9
  b2:	91 05       	cpc	r25, r1
  b4:	00 f0       	brcs	.+0      	; 0xb6 <pvPortMalloc+0xb6>
  b6:	df 01       	movw	r26, r30
  b8:	ac 0f       	add	r26, r28
  ba:	bd 1f       	adc	r27, r29
  bc:	13 96       	adiw	r26, 0x03	; 3
  be:	9c 93       	st	X, r25
  c0:	8e 93       	st	-X, r24
  c2:	12 97       	sbiw	r26, 0x02	; 2
  c4:	d3 83       	std	Z+3, r29	; 0x03
  c6:	c2 83       	std	Z+2, r28	; 0x02
  c8:	12 96       	adiw	r26, 0x02	; 2
  ca:	4d 91       	ld	r20, X+
  cc:	5c 91       	ld	r21, X
  ce:	13 97       	sbiw	r26, 0x03	; 3
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	eb 01       	movw	r28, r22
  d6:	88 81       	ld	r24, Y
  d8:	99 81       	ldd	r25, Y+1	; 0x01
  da:	ec 01       	movw	r28, r24
  dc:	2a 81       	ldd	r18, Y+2	; 0x02
  de:	3b 81       	ldd	r19, Y+3	; 0x03
  e0:	24 17       	cp	r18, r20
  e2:	35 07       	cpc	r19, r21
  e4:	00 f4       	brcc	.+0      	; 0xe6 <pvPortMalloc+0xe6>
  e6:	bc 01       	movw	r22, r24
  e8:	00 c0       	rjmp	.+0      	; 0xea <pvPortMalloc+0xea>
  ea:	11 96       	adiw	r26, 0x01	; 1
  ec:	9c 93       	st	X, r25
  ee:	8e 93       	st	-X, r24
  f0:	eb 01       	movw	r28, r22
  f2:	b9 83       	std	Y+1, r27	; 0x01
  f4:	a8 83       	st	Y, r26
  f6:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  fa:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  fe:	22 81       	ldd	r18, Z+2	; 0x02
 100:	33 81       	ldd	r19, Z+3	; 0x03
 102:	82 1b       	sub	r24, r18
 104:	93 0b       	sbc	r25, r19
 106:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
 10a:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <pvPortMalloc+0x110>
 110:	00 e0       	ldi	r16, 0x00	; 0
 112:	10 e0       	ldi	r17, 0x00	; 0
 114:	0e 94 00 00 	call	0	; 0x0 <pvPortMalloc>
 118:	c8 01       	movw	r24, r16
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	08 95       	ret

Disassembly of section .text.vPortFree:

00000000 <vPortFree>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	00 97       	sbiw	r24, 0x00	; 0
   6:	01 f0       	breq	.+0      	; 0x8 <vPortFree+0x8>
   8:	ec 01       	movw	r28, r24
   a:	24 97       	sbiw	r28, 0x04	; 4
   c:	0e 94 00 00 	call	0	; 0x0 <vPortFree>
  10:	8a 81       	ldd	r24, Y+2	; 0x02
  12:	9b 81       	ldd	r25, Y+3	; 0x03
  14:	e0 e0       	ldi	r30, 0x00	; 0
  16:	f0 e0       	ldi	r31, 0x00	; 0
  18:	a0 81       	ld	r26, Z
  1a:	b1 81       	ldd	r27, Z+1	; 0x01
  1c:	12 96       	adiw	r26, 0x02	; 2
  1e:	2d 91       	ld	r18, X+
  20:	3c 91       	ld	r19, X
  22:	13 97       	sbiw	r26, 0x03	; 3
  24:	28 17       	cp	r18, r24
  26:	39 07       	cpc	r19, r25
  28:	00 f4       	brcc	.+0      	; 0x2a <vPortFree+0x2a>
  2a:	fd 01       	movw	r30, r26
  2c:	00 c0       	rjmp	.+0      	; 0x2e <vPortFree+0x2e>
  2e:	b9 83       	std	Y+1, r27	; 0x01
  30:	a8 83       	st	Y, r26
  32:	d1 83       	std	Z+1, r29	; 0x01
  34:	c0 83       	st	Z, r28
  36:	20 91 00 00 	lds	r18, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  3a:	30 91 00 00 	lds	r19, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  3e:	82 0f       	add	r24, r18
  40:	93 1f       	adc	r25, r19
  42:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
  46:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  4a:	df 91       	pop	r29
  4c:	cf 91       	pop	r28
  4e:	0c 94 00 00 	jmp	0	; 0x0 <vPortFree>
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	08 95       	ret

Disassembly of section .text.xPortGetFreeHeapSize:

00000000 <xPortGetFreeHeapSize>:
   0:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   4:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   8:	08 95       	ret

Disassembly of section .text.vPortInitialiseBlocks:

00000000 <vPortInitialiseBlocks>:
   0:	08 95       	ret

port.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .text.pxPortInitialiseStack 000000d8  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .text.xPortStartScheduler 00000074  00000000  00000000  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  5 .text.vPortEndScheduler 00000002  00000000  00000000  00000180  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.vPortYield 000000b2  00000000  00000000  00000182  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.vPortYieldFromTick 000000b8  00000000  00000000  00000234  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_11 00000006  00000000  00000000  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .comment      00000012  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY

Disassembly of section .text.pxPortInitialiseStack:

00000000 <pxPortInitialiseStack>:
   0:	31 e1       	ldi	r19, 0x11	; 17
   2:	fc 01       	movw	r30, r24
   4:	30 83       	st	Z, r19
   6:	31 97       	sbiw	r30, 0x01	; 1
   8:	22 e2       	ldi	r18, 0x22	; 34
   a:	20 83       	st	Z, r18
   c:	31 97       	sbiw	r30, 0x01	; 1
   e:	a3 e3       	ldi	r26, 0x33	; 51
  10:	a0 83       	st	Z, r26
  12:	31 97       	sbiw	r30, 0x01	; 1
  14:	60 83       	st	Z, r22
  16:	31 97       	sbiw	r30, 0x01	; 1
  18:	70 83       	st	Z, r23
  1a:	31 97       	sbiw	r30, 0x01	; 1
  1c:	10 82       	st	Z, r1
  1e:	31 97       	sbiw	r30, 0x01	; 1
  20:	60 e8       	ldi	r22, 0x80	; 128
  22:	60 83       	st	Z, r22
  24:	31 97       	sbiw	r30, 0x01	; 1
  26:	10 82       	st	Z, r1
  28:	31 97       	sbiw	r30, 0x01	; 1
  2a:	62 e0       	ldi	r22, 0x02	; 2
  2c:	60 83       	st	Z, r22
  2e:	31 97       	sbiw	r30, 0x01	; 1
  30:	63 e0       	ldi	r22, 0x03	; 3
  32:	60 83       	st	Z, r22
  34:	31 97       	sbiw	r30, 0x01	; 1
  36:	64 e0       	ldi	r22, 0x04	; 4
  38:	60 83       	st	Z, r22
  3a:	31 97       	sbiw	r30, 0x01	; 1
  3c:	65 e0       	ldi	r22, 0x05	; 5
  3e:	60 83       	st	Z, r22
  40:	31 97       	sbiw	r30, 0x01	; 1
  42:	66 e0       	ldi	r22, 0x06	; 6
  44:	60 83       	st	Z, r22
  46:	31 97       	sbiw	r30, 0x01	; 1
  48:	67 e0       	ldi	r22, 0x07	; 7
  4a:	60 83       	st	Z, r22
  4c:	31 97       	sbiw	r30, 0x01	; 1
  4e:	68 e0       	ldi	r22, 0x08	; 8
  50:	60 83       	st	Z, r22
  52:	31 97       	sbiw	r30, 0x01	; 1
  54:	69 e0       	ldi	r22, 0x09	; 9
  56:	60 83       	st	Z, r22
  58:	31 97       	sbiw	r30, 0x01	; 1
  5a:	60 e1       	ldi	r22, 0x10	; 16
  5c:	60 83       	st	Z, r22
  5e:	31 97       	sbiw	r30, 0x01	; 1
  60:	30 83       	st	Z, r19
  62:	31 97       	sbiw	r30, 0x01	; 1
  64:	32 e1       	ldi	r19, 0x12	; 18
  66:	30 83       	st	Z, r19
  68:	31 97       	sbiw	r30, 0x01	; 1
  6a:	33 e1       	ldi	r19, 0x13	; 19
  6c:	30 83       	st	Z, r19
  6e:	31 97       	sbiw	r30, 0x01	; 1
  70:	34 e1       	ldi	r19, 0x14	; 20
  72:	30 83       	st	Z, r19
  74:	31 97       	sbiw	r30, 0x01	; 1
  76:	35 e1       	ldi	r19, 0x15	; 21
  78:	30 83       	st	Z, r19
  7a:	31 97       	sbiw	r30, 0x01	; 1
  7c:	36 e1       	ldi	r19, 0x16	; 22
  7e:	30 83       	st	Z, r19
  80:	31 97       	sbiw	r30, 0x01	; 1
  82:	37 e1       	ldi	r19, 0x17	; 23
  84:	30 83       	st	Z, r19
  86:	31 97       	sbiw	r30, 0x01	; 1
  88:	38 e1       	ldi	r19, 0x18	; 24
  8a:	30 83       	st	Z, r19
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	39 e1       	ldi	r19, 0x19	; 25
  90:	30 83       	st	Z, r19
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	30 e2       	ldi	r19, 0x20	; 32
  96:	30 83       	st	Z, r19
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	31 e2       	ldi	r19, 0x21	; 33
  9c:	30 83       	st	Z, r19
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	20 83       	st	Z, r18
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	23 e2       	ldi	r18, 0x23	; 35
  a6:	20 83       	st	Z, r18
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	40 83       	st	Z, r20
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	50 83       	st	Z, r21
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	26 e2       	ldi	r18, 0x26	; 38
  b4:	20 83       	st	Z, r18
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	27 e2       	ldi	r18, 0x27	; 39
  ba:	20 83       	st	Z, r18
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	28 e2       	ldi	r18, 0x28	; 40
  c0:	20 83       	st	Z, r18
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	29 e2       	ldi	r18, 0x29	; 41
  c6:	20 83       	st	Z, r18
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	20 e3       	ldi	r18, 0x30	; 48
  cc:	20 83       	st	Z, r18
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	21 e3       	ldi	r18, 0x31	; 49
  d2:	20 83       	st	Z, r18
  d4:	86 97       	sbiw	r24, 0x26	; 38
  d6:	08 95       	ret

Disassembly of section .text.xPortStartScheduler:

00000000 <xPortStartScheduler>:
   0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__SREG__+0x80004a>
   4:	89 ef       	ldi	r24, 0xF9	; 249
   6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__SREG__+0x800049>
   a:	8b e0       	ldi	r24, 0x0B	; 11
   c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__SREG__+0x800042>
  10:	ef e6       	ldi	r30, 0x6F	; 111
  12:	f0 e0       	ldi	r31, 0x00	; 0
  14:	80 81       	ld	r24, Z
  16:	82 60       	ori	r24, 0x02	; 2
  18:	80 83       	st	Z, r24
  1a:	a0 91 00 00 	lds	r26, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  1e:	b0 91 00 00 	lds	r27, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  22:	cd 91       	ld	r28, X+
  24:	cd bf       	out	0x3d, r28	; 61
  26:	dd 91       	ld	r29, X+
  28:	de bf       	out	0x3e, r29	; 62
  2a:	ff 91       	pop	r31
  2c:	ef 91       	pop	r30
  2e:	df 91       	pop	r29
  30:	cf 91       	pop	r28
  32:	bf 91       	pop	r27
  34:	af 91       	pop	r26
  36:	9f 91       	pop	r25
  38:	8f 91       	pop	r24
  3a:	7f 91       	pop	r23
  3c:	6f 91       	pop	r22
  3e:	5f 91       	pop	r21
  40:	4f 91       	pop	r20
  42:	3f 91       	pop	r19
  44:	2f 91       	pop	r18
  46:	1f 91       	pop	r17
  48:	0f 91       	pop	r16
  4a:	ff 90       	pop	r15
  4c:	ef 90       	pop	r14
  4e:	df 90       	pop	r13
  50:	cf 90       	pop	r12
  52:	bf 90       	pop	r11
  54:	af 90       	pop	r10
  56:	9f 90       	pop	r9
  58:	8f 90       	pop	r8
  5a:	7f 90       	pop	r7
  5c:	6f 90       	pop	r6
  5e:	5f 90       	pop	r5
  60:	4f 90       	pop	r4
  62:	3f 90       	pop	r3
  64:	2f 90       	pop	r2
  66:	1f 90       	pop	r1
  68:	0f 90       	pop	r0
  6a:	0f be       	out	0x3f, r0	; 63
  6c:	0f 90       	pop	r0
  6e:	08 95       	ret
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	08 95       	ret

Disassembly of section .text.vPortEndScheduler:

00000000 <vPortEndScheduler>:
   0:	08 95       	ret

Disassembly of section .text.vPortYield:

00000000 <vPortYield>:
   0:	0f 92       	push	r0
   2:	0f b6       	in	r0, 0x3f	; 63
   4:	f8 94       	cli
   6:	0f 92       	push	r0
   8:	1f 92       	push	r1
   a:	11 24       	eor	r1, r1
   c:	2f 92       	push	r2
   e:	3f 92       	push	r3
  10:	4f 92       	push	r4
  12:	5f 92       	push	r5
  14:	6f 92       	push	r6
  16:	7f 92       	push	r7
  18:	8f 92       	push	r8
  1a:	9f 92       	push	r9
  1c:	af 92       	push	r10
  1e:	bf 92       	push	r11
  20:	cf 92       	push	r12
  22:	df 92       	push	r13
  24:	ef 92       	push	r14
  26:	ff 92       	push	r15
  28:	0f 93       	push	r16
  2a:	1f 93       	push	r17
  2c:	2f 93       	push	r18
  2e:	3f 93       	push	r19
  30:	4f 93       	push	r20
  32:	5f 93       	push	r21
  34:	6f 93       	push	r22
  36:	7f 93       	push	r23
  38:	8f 93       	push	r24
  3a:	9f 93       	push	r25
  3c:	af 93       	push	r26
  3e:	bf 93       	push	r27
  40:	cf 93       	push	r28
  42:	df 93       	push	r29
  44:	ef 93       	push	r30
  46:	ff 93       	push	r31
  48:	a0 91 00 00 	lds	r26, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  4c:	b0 91 00 00 	lds	r27, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  50:	0d b6       	in	r0, 0x3d	; 61
  52:	0d 92       	st	X+, r0
  54:	0e b6       	in	r0, 0x3e	; 62
  56:	0d 92       	st	X+, r0
  58:	0e 94 00 00 	call	0	; 0x0 <vPortYield>
  5c:	a0 91 00 00 	lds	r26, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  60:	b0 91 00 00 	lds	r27, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  64:	cd 91       	ld	r28, X+
  66:	cd bf       	out	0x3d, r28	; 61
  68:	dd 91       	ld	r29, X+
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	ff 91       	pop	r31
  6e:	ef 91       	pop	r30
  70:	df 91       	pop	r29
  72:	cf 91       	pop	r28
  74:	bf 91       	pop	r27
  76:	af 91       	pop	r26
  78:	9f 91       	pop	r25
  7a:	8f 91       	pop	r24
  7c:	7f 91       	pop	r23
  7e:	6f 91       	pop	r22
  80:	5f 91       	pop	r21
  82:	4f 91       	pop	r20
  84:	3f 91       	pop	r19
  86:	2f 91       	pop	r18
  88:	1f 91       	pop	r17
  8a:	0f 91       	pop	r16
  8c:	ff 90       	pop	r15
  8e:	ef 90       	pop	r14
  90:	df 90       	pop	r13
  92:	cf 90       	pop	r12
  94:	bf 90       	pop	r11
  96:	af 90       	pop	r10
  98:	9f 90       	pop	r9
  9a:	8f 90       	pop	r8
  9c:	7f 90       	pop	r7
  9e:	6f 90       	pop	r6
  a0:	5f 90       	pop	r5
  a2:	4f 90       	pop	r4
  a4:	3f 90       	pop	r3
  a6:	2f 90       	pop	r2
  a8:	1f 90       	pop	r1
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	08 95       	ret

Disassembly of section .text.vPortYieldFromTick:

00000000 <vPortYieldFromTick>:
   0:	0f 92       	push	r0
   2:	0f b6       	in	r0, 0x3f	; 63
   4:	f8 94       	cli
   6:	0f 92       	push	r0
   8:	1f 92       	push	r1
   a:	11 24       	eor	r1, r1
   c:	2f 92       	push	r2
   e:	3f 92       	push	r3
  10:	4f 92       	push	r4
  12:	5f 92       	push	r5
  14:	6f 92       	push	r6
  16:	7f 92       	push	r7
  18:	8f 92       	push	r8
  1a:	9f 92       	push	r9
  1c:	af 92       	push	r10
  1e:	bf 92       	push	r11
  20:	cf 92       	push	r12
  22:	df 92       	push	r13
  24:	ef 92       	push	r14
  26:	ff 92       	push	r15
  28:	0f 93       	push	r16
  2a:	1f 93       	push	r17
  2c:	2f 93       	push	r18
  2e:	3f 93       	push	r19
  30:	4f 93       	push	r20
  32:	5f 93       	push	r21
  34:	6f 93       	push	r22
  36:	7f 93       	push	r23
  38:	8f 93       	push	r24
  3a:	9f 93       	push	r25
  3c:	af 93       	push	r26
  3e:	bf 93       	push	r27
  40:	cf 93       	push	r28
  42:	df 93       	push	r29
  44:	ef 93       	push	r30
  46:	ff 93       	push	r31
  48:	a0 91 00 00 	lds	r26, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  4c:	b0 91 00 00 	lds	r27, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  50:	0d b6       	in	r0, 0x3d	; 61
  52:	0d 92       	st	X+, r0
  54:	0e b6       	in	r0, 0x3e	; 62
  56:	0d 92       	st	X+, r0
  58:	0e 94 00 00 	call	0	; 0x0 <vPortYieldFromTick>
  5c:	81 11       	cpse	r24, r1
  5e:	0e 94 00 00 	call	0	; 0x0 <vPortYieldFromTick>
  62:	a0 91 00 00 	lds	r26, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  66:	b0 91 00 00 	lds	r27, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  6a:	cd 91       	ld	r28, X+
  6c:	cd bf       	out	0x3d, r28	; 61
  6e:	dd 91       	ld	r29, X+
  70:	de bf       	out	0x3e, r29	; 62
  72:	ff 91       	pop	r31
  74:	ef 91       	pop	r30
  76:	df 91       	pop	r29
  78:	cf 91       	pop	r28
  7a:	bf 91       	pop	r27
  7c:	af 91       	pop	r26
  7e:	9f 91       	pop	r25
  80:	8f 91       	pop	r24
  82:	7f 91       	pop	r23
  84:	6f 91       	pop	r22
  86:	5f 91       	pop	r21
  88:	4f 91       	pop	r20
  8a:	3f 91       	pop	r19
  8c:	2f 91       	pop	r18
  8e:	1f 91       	pop	r17
  90:	0f 91       	pop	r16
  92:	ff 90       	pop	r15
  94:	ef 90       	pop	r14
  96:	df 90       	pop	r13
  98:	cf 90       	pop	r12
  9a:	bf 90       	pop	r11
  9c:	af 90       	pop	r10
  9e:	9f 90       	pop	r9
  a0:	8f 90       	pop	r8
  a2:	7f 90       	pop	r7
  a4:	6f 90       	pop	r6
  a6:	5f 90       	pop	r5
  a8:	4f 90       	pop	r4
  aa:	3f 90       	pop	r3
  ac:	2f 90       	pop	r2
  ae:	1f 90       	pop	r1
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	08 95       	ret

Disassembly of section .text.__vector_11:

00000000 <__vector_11>:
   0:	0e 94 00 00 	call	0	; 0x0 <__vector_11>
   4:	18 95       	reti

croutine.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .text.xCoRoutineCreate 000000e4  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  4 .text.vCoRoutineAddToDelayedList 00000084  00000000  00000000  00000118  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  5 .text.vCoRoutineSchedule 000001da  00000000  00000000  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.xCoRoutineRemoveFromEventList 0000004a  00000000  00000000  00000376  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .bss.xPassedTicks 00000002  00000000  00000000  000003c0  2**0
                  ALLOC
  8 .bss.xLastTickCount 00000002  00000000  00000000  000003c0  2**0
                  ALLOC
  9 .bss.xCoRoutineTickCount 00000002  00000000  00000000  000003c0  2**0
                  ALLOC
 10 .bss.uxTopCoRoutineReadyPriority 00000001  00000000  00000000  000003c0  2**0
                  ALLOC
 11 .bss.pxCurrentCoRoutine 00000002  00000000  00000000  000003c0  2**0
                  ALLOC
 12 .bss.xPendingReadyCoRoutineList 00000009  00000000  00000000  000003c0  2**0
                  ALLOC
 13 .bss.pxOverflowDelayedCoRoutineList 00000002  00000000  00000000  000003c0  2**0
                  ALLOC
 14 .bss.pxDelayedCoRoutineList 00000002  00000000  00000000  000003c0  2**0
                  ALLOC
 15 .bss.xDelayedCoRoutineList2 00000009  00000000  00000000  000003c0  2**0
                  ALLOC
 16 .bss.xDelayedCoRoutineList1 00000009  00000000  00000000  000003c0  2**0
                  ALLOC
 17 .bss.pxReadyCoRoutineLists 00000012  00000000  00000000  000003c0  2**0
                  ALLOC
 18 .comment      00000012  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY

Disassembly of section .text.xCoRoutineCreate:

00000000 <xCoRoutineCreate>:
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	6c 01       	movw	r12, r24
  10:	16 2f       	mov	r17, r22
  12:	f4 2e       	mov	r15, r20
  14:	8a e1       	ldi	r24, 0x1A	; 26
  16:	90 e0       	ldi	r25, 0x00	; 0
  18:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineCreate>
  1c:	ec 01       	movw	r28, r24
  1e:	89 2b       	or	r24, r25
  20:	01 f4       	brne	.+0      	; 0x22 <xCoRoutineCreate+0x22>
  22:	00 c0       	rjmp	.+0      	; 0x24 <xCoRoutineCreate+0x24>
  24:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  28:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  2c:	89 2b       	or	r24, r25
  2e:	01 f4       	brne	.+0      	; 0x30 <xCoRoutineCreate+0x30>
  30:	d0 93 00 00 	sts	0x0000, r29	; 0x800000 <__SREG__+0x7fffc1>
  34:	c0 93 00 00 	sts	0x0000, r28	; 0x800000 <__SREG__+0x7fffc1>
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineCreate>
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineCreate>
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineCreate>
  50:	80 e0       	ldi	r24, 0x00	; 0
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineCreate>
  58:	80 e0       	ldi	r24, 0x00	; 0
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineCreate>
  60:	80 e0       	ldi	r24, 0x00	; 0
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
  68:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
  74:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  78:	11 11       	cpse	r17, r1
  7a:	11 e0       	ldi	r17, 0x01	; 1
  7c:	19 8e       	std	Y+25, r1	; 0x19
  7e:	18 8e       	std	Y+24, r1	; 0x18
  80:	1e 8b       	std	Y+22, r17	; 0x16
  82:	ff 8a       	std	Y+23, r15	; 0x17
  84:	fe 01       	movw	r30, r28
  86:	c1 92       	st	Z+, r12
  88:	d1 92       	st	Z+, r13
  8a:	7f 01       	movw	r14, r30
  8c:	cf 01       	movw	r24, r30
  8e:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineCreate>
  92:	ce 01       	movw	r24, r28
  94:	0c 96       	adiw	r24, 0x0c	; 12
  96:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineCreate>
  9a:	d9 87       	std	Y+9, r29	; 0x09
  9c:	c8 87       	std	Y+8, r28	; 0x08
  9e:	db 8b       	std	Y+19, r29	; 0x13
  a0:	ca 8b       	std	Y+18, r28	; 0x12
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	81 1b       	sub	r24, r17
  a8:	91 09       	sbc	r25, r1
  aa:	9d 87       	std	Y+13, r25	; 0x0d
  ac:	8c 87       	std	Y+12, r24	; 0x0c
  ae:	8e 89       	ldd	r24, Y+22	; 0x16
  b0:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  b4:	98 17       	cp	r25, r24
  b6:	00 f4       	brcc	.+0      	; 0xb8 <xCoRoutineCreate+0xb8>
  b8:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  bc:	f9 e0       	ldi	r31, 0x09	; 9
  be:	8f 9f       	mul	r24, r31
  c0:	c0 01       	movw	r24, r0
  c2:	11 24       	eor	r1, r1
  c4:	b7 01       	movw	r22, r14
  c6:	80 50       	subi	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineCreate>
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <xCoRoutineCreate+0xd2>
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	1f 91       	pop	r17
  da:	ff 90       	pop	r15
  dc:	ef 90       	pop	r14
  de:	df 90       	pop	r13
  e0:	cf 90       	pop	r12
  e2:	08 95       	ret

Disassembly of section .text.vCoRoutineAddToDelayedList:

00000000 <vCoRoutineAddToDelayedList>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8b 01       	movw	r16, r22
   a:	c0 91 00 00 	lds	r28, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   e:	d0 91 00 00 	lds	r29, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  12:	c8 0f       	add	r28, r24
  14:	d9 1f       	adc	r29, r25
  16:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  1a:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  1e:	02 96       	adiw	r24, 0x02	; 2
  20:	0e 94 00 00 	call	0	; 0x0 <vCoRoutineAddToDelayedList>
  24:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  28:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  2c:	d3 83       	std	Z+3, r29	; 0x03
  2e:	c2 83       	std	Z+2, r28	; 0x02
  30:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  34:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  38:	bf 01       	movw	r22, r30
  3a:	6e 5f       	subi	r22, 0xFE	; 254
  3c:	7f 4f       	sbci	r23, 0xFF	; 255
  3e:	c8 17       	cp	r28, r24
  40:	d9 07       	cpc	r29, r25
  42:	00 f4       	brcc	.+0      	; 0x44 <vCoRoutineAddToDelayedList+0x44>
  44:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  48:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  4c:	00 c0       	rjmp	.+0      	; 0x4e <vCoRoutineAddToDelayedList+0x4e>
  4e:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  52:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  56:	0e 94 00 00 	call	0	; 0x0 <vCoRoutineAddToDelayedList>
  5a:	01 15       	cp	r16, r1
  5c:	11 05       	cpc	r17, r1
  5e:	01 f0       	breq	.+0      	; 0x60 <vCoRoutineAddToDelayedList+0x60>
  60:	60 91 00 00 	lds	r22, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  64:	70 91 00 00 	lds	r23, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  68:	64 5f       	subi	r22, 0xF4	; 244
  6a:	7f 4f       	sbci	r23, 0xFF	; 255
  6c:	c8 01       	movw	r24, r16
  6e:	df 91       	pop	r29
  70:	cf 91       	pop	r28
  72:	1f 91       	pop	r17
  74:	0f 91       	pop	r16
  76:	0c 94 00 00 	jmp	0	; 0x0 <vCoRoutineAddToDelayedList>
  7a:	df 91       	pop	r29
  7c:	cf 91       	pop	r28
  7e:	1f 91       	pop	r17
  80:	0f 91       	pop	r16
  82:	08 95       	ret

Disassembly of section .text.vCoRoutineSchedule:

00000000 <vCoRoutineSchedule>:
   0:	ff 92       	push	r15
   2:	0f 93       	push	r16
   4:	1f 93       	push	r17
   6:	cf 93       	push	r28
   8:	df 93       	push	r29
   a:	99 e0       	ldi	r25, 0x09	; 9
   c:	f9 2e       	mov	r15, r25
   e:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  12:	88 23       	and	r24, r24
  14:	01 f0       	breq	.+0      	; 0x16 <vCoRoutineSchedule+0x16>
  16:	f8 94       	cli
  18:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  1c:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  20:	c6 81       	ldd	r28, Z+6	; 0x06
  22:	d7 81       	ldd	r29, Z+7	; 0x07
  24:	ce 01       	movw	r24, r28
  26:	0c 96       	adiw	r24, 0x0c	; 12
  28:	0e 94 00 00 	call	0	; 0x0 <vCoRoutineSchedule>
  2c:	78 94       	sei
  2e:	8e 01       	movw	r16, r28
  30:	0e 5f       	subi	r16, 0xFE	; 254
  32:	1f 4f       	sbci	r17, 0xFF	; 255
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <vCoRoutineSchedule>
  3a:	8e 89       	ldd	r24, Y+22	; 0x16
  3c:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  40:	98 17       	cp	r25, r24
  42:	00 f4       	brcc	.+0      	; 0x44 <vCoRoutineSchedule+0x44>
  44:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  48:	f8 9e       	mul	r15, r24
  4a:	c0 01       	movw	r24, r0
  4c:	11 24       	eor	r1, r1
  4e:	b8 01       	movw	r22, r16
  50:	80 50       	subi	r24, 0x00	; 0
  52:	90 40       	sbci	r25, 0x00	; 0
  54:	0e 94 00 00 	call	0	; 0x0 <vCoRoutineSchedule>
  58:	00 c0       	rjmp	.+0      	; 0x5a <vCoRoutineSchedule+0x5a>
  5a:	0e 94 00 00 	call	0	; 0x0 <vCoRoutineSchedule>
  5e:	20 91 00 00 	lds	r18, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  62:	30 91 00 00 	lds	r19, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  66:	82 1b       	sub	r24, r18
  68:	93 0b       	sbc	r25, r19
  6a:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
  6e:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  72:	89 e0       	ldi	r24, 0x09	; 9
  74:	f8 2e       	mov	r15, r24
  76:	20 91 00 00 	lds	r18, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  7a:	30 91 00 00 	lds	r19, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  7e:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  82:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  86:	21 15       	cp	r18, r1
  88:	31 05       	cpc	r19, r1
  8a:	01 f4       	brne	.+0      	; 0x8c <vCoRoutineSchedule+0x8c>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <vCoRoutineSchedule+0x8e>
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
  94:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	31 09       	sbc	r19, r1
  9c:	30 93 00 00 	sts	0x0000, r19	; 0x800000 <__SREG__+0x7fffc1>
  a0:	20 93 00 00 	sts	0x0000, r18	; 0x800000 <__SREG__+0x7fffc1>
  a4:	89 2b       	or	r24, r25
  a6:	01 f0       	breq	.+0      	; 0xa8 <vCoRoutineSchedule+0xa8>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <vCoRoutineSchedule+0xaa>
  aa:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  ae:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  b2:	20 91 00 00 	lds	r18, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  b6:	30 91 00 00 	lds	r19, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  ba:	30 93 00 00 	sts	0x0000, r19	; 0x800000 <__SREG__+0x7fffc1>
  be:	20 93 00 00 	sts	0x0000, r18	; 0x800000 <__SREG__+0x7fffc1>
  c2:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
  c6:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <vCoRoutineSchedule+0xcc>
  cc:	05 80       	ldd	r0, Z+5	; 0x05
  ce:	f6 81       	ldd	r31, Z+6	; 0x06
  d0:	e0 2d       	mov	r30, r0
  d2:	c6 81       	ldd	r28, Z+6	; 0x06
  d4:	d7 81       	ldd	r29, Z+7	; 0x07
  d6:	2a 81       	ldd	r18, Y+2	; 0x02
  d8:	3b 81       	ldd	r19, Y+3	; 0x03
  da:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  de:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  e2:	82 17       	cp	r24, r18
  e4:	93 07       	cpc	r25, r19
  e6:	00 f0       	brcs	.+0      	; 0xe8 <vCoRoutineSchedule+0xe8>
  e8:	f8 94       	cli
  ea:	8e 01       	movw	r16, r28
  ec:	0e 5f       	subi	r16, 0xFE	; 254
  ee:	1f 4f       	sbci	r17, 0xFF	; 255
  f0:	c8 01       	movw	r24, r16
  f2:	0e 94 00 00 	call	0	; 0x0 <vCoRoutineSchedule>
  f6:	8c 89       	ldd	r24, Y+20	; 0x14
  f8:	9d 89       	ldd	r25, Y+21	; 0x15
  fa:	89 2b       	or	r24, r25
  fc:	01 f0       	breq	.+0      	; 0xfe <vCoRoutineSchedule+0xfe>
  fe:	ce 01       	movw	r24, r28
 100:	0c 96       	adiw	r24, 0x0c	; 12
 102:	0e 94 00 00 	call	0	; 0x0 <vCoRoutineSchedule>
 106:	78 94       	sei
 108:	8e 89       	ldd	r24, Y+22	; 0x16
 10a:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 10e:	98 17       	cp	r25, r24
 110:	00 f4       	brcc	.+0      	; 0x112 <vCoRoutineSchedule+0x112>
 112:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
 116:	f8 9e       	mul	r15, r24
 118:	c0 01       	movw	r24, r0
 11a:	11 24       	eor	r1, r1
 11c:	b8 01       	movw	r22, r16
 11e:	80 50       	subi	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	0e 94 00 00 	call	0	; 0x0 <vCoRoutineSchedule>
 126:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 12a:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 12e:	80 81       	ld	r24, Z
 130:	81 11       	cpse	r24, r1
 132:	00 c0       	rjmp	.+0      	; 0x134 <vCoRoutineSchedule+0x134>
 134:	00 c0       	rjmp	.+0      	; 0x136 <vCoRoutineSchedule+0x136>
 136:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
 13a:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
 13e:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 142:	69 e0       	ldi	r22, 0x09	; 9
 144:	48 2f       	mov	r20, r24
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	64 9f       	mul	r22, r20
 14a:	90 01       	movw	r18, r0
 14c:	65 9f       	mul	r22, r21
 14e:	30 0d       	add	r19, r0
 150:	11 24       	eor	r1, r1
 152:	f9 01       	movw	r30, r18
 154:	e0 50       	subi	r30, 0x00	; 0
 156:	f0 40       	sbci	r31, 0x00	; 0
 158:	90 81       	ld	r25, Z
 15a:	91 11       	cpse	r25, r1
 15c:	00 c0       	rjmp	.+0      	; 0x15e <vCoRoutineSchedule+0x15e>
 15e:	81 11       	cpse	r24, r1
 160:	00 c0       	rjmp	.+0      	; 0x162 <vCoRoutineSchedule+0x162>
 162:	10 92 00 00 	sts	0x0000, r1	; 0x800000 <__SREG__+0x7fffc1>
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	ff 90       	pop	r15
 170:	08 95       	ret
 172:	81 50       	subi	r24, 0x01	; 1
 174:	00 c0       	rjmp	.+0      	; 0x176 <vCoRoutineSchedule+0x176>
 176:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
 17a:	a1 81       	ldd	r26, Z+1	; 0x01
 17c:	b2 81       	ldd	r27, Z+2	; 0x02
 17e:	12 96       	adiw	r26, 0x02	; 2
 180:	0d 90       	ld	r0, X+
 182:	bc 91       	ld	r27, X
 184:	a0 2d       	mov	r26, r0
 186:	b2 83       	std	Z+2, r27	; 0x02
 188:	a1 83       	std	Z+1, r26	; 0x01
 18a:	20 50       	subi	r18, 0x00	; 0
 18c:	30 40       	sbci	r19, 0x00	; 0
 18e:	a2 17       	cp	r26, r18
 190:	b3 07       	cpc	r27, r19
 192:	01 f4       	brne	.+0      	; 0x194 <vCoRoutineSchedule+0x194>
 194:	12 96       	adiw	r26, 0x02	; 2
 196:	8d 91       	ld	r24, X+
 198:	9c 91       	ld	r25, X
 19a:	13 97       	sbiw	r26, 0x03	; 3
 19c:	92 83       	std	Z+2, r25	; 0x02
 19e:	81 83       	std	Z+1, r24	; 0x01
 1a0:	89 e0       	ldi	r24, 0x09	; 9
 1a2:	84 9f       	mul	r24, r20
 1a4:	f0 01       	movw	r30, r0
 1a6:	85 9f       	mul	r24, r21
 1a8:	f0 0d       	add	r31, r0
 1aa:	11 24       	eor	r1, r1
 1ac:	e0 50       	subi	r30, 0x00	; 0
 1ae:	f0 40       	sbci	r31, 0x00	; 0
 1b0:	01 80       	ldd	r0, Z+1	; 0x01
 1b2:	f2 81       	ldd	r31, Z+2	; 0x02
 1b4:	e0 2d       	mov	r30, r0
 1b6:	86 81       	ldd	r24, Z+6	; 0x06
 1b8:	97 81       	ldd	r25, Z+7	; 0x07
 1ba:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
 1be:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
 1c2:	dc 01       	movw	r26, r24
 1c4:	ed 91       	ld	r30, X+
 1c6:	fc 91       	ld	r31, X
 1c8:	11 97       	sbiw	r26, 0x01	; 1
 1ca:	57 96       	adiw	r26, 0x17	; 23
 1cc:	6c 91       	ld	r22, X
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	09 94       	ijmp

Disassembly of section .text.xCoRoutineRemoveFromEventList:

00000000 <xCoRoutineRemoveFromEventList>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	dc 01       	movw	r26, r24
   a:	15 96       	adiw	r26, 0x05	; 5
   c:	ed 91       	ld	r30, X+
   e:	fc 91       	ld	r31, X
  10:	16 97       	sbiw	r26, 0x06	; 6
  12:	c6 81       	ldd	r28, Z+6	; 0x06
  14:	d7 81       	ldd	r29, Z+7	; 0x07
  16:	8e 01       	movw	r16, r28
  18:	04 5f       	subi	r16, 0xF4	; 244
  1a:	1f 4f       	sbci	r17, 0xFF	; 255
  1c:	c8 01       	movw	r24, r16
  1e:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineRemoveFromEventList>
  22:	b8 01       	movw	r22, r16
  24:	80 e0       	ldi	r24, 0x00	; 0
  26:	90 e0       	ldi	r25, 0x00	; 0
  28:	0e 94 00 00 	call	0	; 0x0 <xCoRoutineRemoveFromEventList>
  2c:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  30:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  34:	81 e0       	ldi	r24, 0x01	; 1
  36:	2e 89       	ldd	r18, Y+22	; 0x16
  38:	96 89       	ldd	r25, Z+22	; 0x16
  3a:	29 17       	cp	r18, r25
  3c:	00 f4       	brcc	.+0      	; 0x3e <xCoRoutineRemoveFromEventList+0x3e>
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	df 91       	pop	r29
  42:	cf 91       	pop	r28
  44:	1f 91       	pop	r17
  46:	0f 91       	pop	r16
  48:	08 95       	ret

event_groups.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .text.xEventGroupCreate 00000026  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  4 .text.xEventGroupWaitBits 000000f0  00000000  00000000  0000005a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  5 .text.xEventGroupClearBits 0000001e  00000000  00000000  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.xEventGroupGetBitsFromISR 00000008  00000000  00000000  00000168  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text.xEventGroupSetBits 000000aa  00000000  00000000  00000170  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.xEventGroupSync 000000d6  00000000  00000000  0000021a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.vEventGroupDelete 0000002c  00000000  00000000  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.vEventGroupSetBitsCallback 00000006  00000000  00000000  0000031c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.vEventGroupClearBitsCallback 00000006  00000000  00000000  00000322  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .comment      00000012  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY

Disassembly of section .text.xEventGroupCreate:

00000000 <xEventGroupCreate>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	8b e0       	ldi	r24, 0x0B	; 11
   6:	90 e0       	ldi	r25, 0x00	; 0
   8:	0e 94 00 00 	call	0	; 0x0 <xEventGroupCreate>
   c:	ec 01       	movw	r28, r24
   e:	00 97       	sbiw	r24, 0x00	; 0
  10:	01 f0       	breq	.+0      	; 0x12 <xEventGroupCreate+0x12>
  12:	fc 01       	movw	r30, r24
  14:	11 92       	st	Z+, r1
  16:	11 92       	st	Z+, r1
  18:	cf 01       	movw	r24, r30
  1a:	0e 94 00 00 	call	0	; 0x0 <xEventGroupCreate>
  1e:	ce 01       	movw	r24, r28
  20:	df 91       	pop	r29
  22:	cf 91       	pop	r28
  24:	08 95       	ret

Disassembly of section .text.xEventGroupWaitBits:

00000000 <xEventGroupWaitBits>:
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	6c 01       	movw	r12, r24
  16:	7b 01       	movw	r14, r22
  18:	b4 2e       	mov	r11, r20
  1a:	a2 2e       	mov	r10, r18
  1c:	0e 94 00 00 	call	0	; 0x0 <xEventGroupWaitBits>
  20:	f6 01       	movw	r30, r12
  22:	c0 81       	ld	r28, Z
  24:	d1 81       	ldd	r29, Z+1	; 0x01
  26:	ce 01       	movw	r24, r28
  28:	8e 21       	and	r24, r14
  2a:	9f 21       	and	r25, r15
  2c:	a1 10       	cpse	r10, r1
  2e:	00 c0       	rjmp	.+0      	; 0x30 <xEventGroupWaitBits+0x30>
  30:	89 2b       	or	r24, r25
  32:	01 f4       	brne	.+0      	; 0x34 <xEventGroupWaitBits+0x34>
  34:	00 c0       	rjmp	.+0      	; 0x36 <xEventGroupWaitBits+0x36>
  36:	e8 16       	cp	r14, r24
  38:	f9 06       	cpc	r15, r25
  3a:	01 f4       	brne	.+0      	; 0x3c <xEventGroupWaitBits+0x3c>
  3c:	bb 20       	and	r11, r11
  3e:	01 f0       	breq	.+0      	; 0x40 <xEventGroupWaitBits+0x40>
  40:	c7 01       	movw	r24, r14
  42:	80 95       	com	r24
  44:	90 95       	com	r25
  46:	8c 23       	and	r24, r28
  48:	9d 23       	and	r25, r29
  4a:	f6 01       	movw	r30, r12
  4c:	91 83       	std	Z+1, r25	; 0x01
  4e:	80 83       	st	Z, r24
  50:	00 e0       	ldi	r16, 0x00	; 0
  52:	10 e0       	ldi	r17, 0x00	; 0
  54:	0e 94 00 00 	call	0	; 0x0 <xEventGroupWaitBits>
  58:	01 2b       	or	r16, r17
  5a:	01 f4       	brne	.+0      	; 0x5c <xEventGroupWaitBits+0x5c>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <xEventGroupWaitBits+0x5e>
  5e:	81 11       	cpse	r24, r1
  60:	00 c0       	rjmp	.+0      	; 0x62 <xEventGroupWaitBits+0x62>
  62:	0e 94 00 00 	call	0	; 0x0 <xEventGroupWaitBits>
  66:	0e 94 00 00 	call	0	; 0x0 <xEventGroupWaitBits>
  6a:	91 fd       	sbrc	r25, 1
  6c:	00 c0       	rjmp	.+0      	; 0x6e <xEventGroupWaitBits+0x6e>
  6e:	0f b6       	in	r0, 0x3f	; 63
  70:	f8 94       	cli
  72:	0f 92       	push	r0
  74:	f6 01       	movw	r30, r12
  76:	80 81       	ld	r24, Z
  78:	91 81       	ldd	r25, Z+1	; 0x01
  7a:	97 01       	movw	r18, r14
  7c:	28 23       	and	r18, r24
  7e:	39 23       	and	r19, r25
  80:	a1 10       	cpse	r10, r1
  82:	00 c0       	rjmp	.+0      	; 0x84 <xEventGroupWaitBits+0x84>
  84:	23 2b       	or	r18, r19
  86:	01 f4       	brne	.+0      	; 0x88 <xEventGroupWaitBits+0x88>
  88:	00 c0       	rjmp	.+0      	; 0x8a <xEventGroupWaitBits+0x8a>
  8a:	e2 16       	cp	r14, r18
  8c:	f3 06       	cpc	r15, r19
  8e:	01 f4       	brne	.+0      	; 0x90 <xEventGroupWaitBits+0x90>
  90:	bb 20       	and	r11, r11
  92:	01 f0       	breq	.+0      	; 0x94 <xEventGroupWaitBits+0x94>
  94:	e0 94       	com	r14
  96:	f0 94       	com	r15
  98:	e8 22       	and	r14, r24
  9a:	f9 22       	and	r15, r25
  9c:	f6 01       	movw	r30, r12
  9e:	f1 82       	std	Z+1, r15	; 0x01
  a0:	e0 82       	st	Z, r14
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	ec 01       	movw	r28, r24
  a8:	dd 27       	eor	r29, r29
  aa:	00 c0       	rjmp	.+0      	; 0xac <xEventGroupWaitBits+0xac>
  ac:	01 15       	cp	r16, r1
  ae:	11 05       	cpc	r17, r1
  b0:	01 f0       	breq	.+0      	; 0xb2 <xEventGroupWaitBits+0xb2>
  b2:	bb 20       	and	r11, r11
  b4:	01 f0       	breq	.+0      	; 0xb6 <xEventGroupWaitBits+0xb6>
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	71 e0       	ldi	r23, 0x01	; 1
  ba:	00 c0       	rjmp	.+0      	; 0xbc <xEventGroupWaitBits+0xbc>
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	a1 10       	cpse	r10, r1
  c2:	74 60       	ori	r23, 0x04	; 4
  c4:	6e 29       	or	r22, r14
  c6:	7f 29       	or	r23, r15
  c8:	a8 01       	movw	r20, r16
  ca:	c6 01       	movw	r24, r12
  cc:	02 96       	adiw	r24, 0x02	; 2
  ce:	0e 94 00 00 	call	0	; 0x0 <xEventGroupWaitBits>
  d2:	c0 e0       	ldi	r28, 0x00	; 0
  d4:	d0 e0       	ldi	r29, 0x00	; 0
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <xEventGroupWaitBits+0xd8>
  d8:	ce 01       	movw	r24, r28
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	1f 91       	pop	r17
  e0:	0f 91       	pop	r16
  e2:	ff 90       	pop	r15
  e4:	ef 90       	pop	r14
  e6:	df 90       	pop	r13
  e8:	cf 90       	pop	r12
  ea:	bf 90       	pop	r11
  ec:	af 90       	pop	r10
  ee:	08 95       	ret

Disassembly of section .text.xEventGroupClearBits:

00000000 <xEventGroupClearBits>:
   0:	fc 01       	movw	r30, r24
   2:	0f b6       	in	r0, 0x3f	; 63
   4:	f8 94       	cli
   6:	0f 92       	push	r0
   8:	80 81       	ld	r24, Z
   a:	91 81       	ldd	r25, Z+1	; 0x01
   c:	60 95       	com	r22
   e:	70 95       	com	r23
  10:	68 23       	and	r22, r24
  12:	79 23       	and	r23, r25
  14:	71 83       	std	Z+1, r23	; 0x01
  16:	60 83       	st	Z, r22
  18:	0f 90       	pop	r0
  1a:	0f be       	out	0x3f, r0	; 63
  1c:	08 95       	ret

Disassembly of section .text.xEventGroupGetBitsFromISR:

00000000 <xEventGroupGetBitsFromISR>:
   0:	fc 01       	movw	r30, r24
   2:	80 81       	ld	r24, Z
   4:	91 81       	ldd	r25, Z+1	; 0x01
   6:	08 95       	ret

Disassembly of section .text.xEventGroupSetBits:

00000000 <xEventGroupSetBits>:
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	8c 01       	movw	r16, r24
  12:	eb 01       	movw	r28, r22
  14:	7c 01       	movw	r14, r24
  16:	85 e0       	ldi	r24, 0x05	; 5
  18:	e8 0e       	add	r14, r24
  1a:	f1 1c       	adc	r15, r1
  1c:	0e 94 00 00 	call	0	; 0x0 <xEventGroupSetBits>
  20:	d8 01       	movw	r26, r16
  22:	17 96       	adiw	r26, 0x07	; 7
  24:	ed 91       	ld	r30, X+
  26:	fc 91       	ld	r31, X
  28:	18 97       	sbiw	r26, 0x08	; 8
  2a:	8d 91       	ld	r24, X+
  2c:	9c 91       	ld	r25, X
  2e:	11 97       	sbiw	r26, 0x01	; 1
  30:	c8 2b       	or	r28, r24
  32:	d9 2b       	or	r29, r25
  34:	cd 93       	st	X+, r28
  36:	dc 93       	st	X, r29
  38:	c0 e0       	ldi	r28, 0x00	; 0
  3a:	d0 e0       	ldi	r29, 0x00	; 0
  3c:	d8 01       	movw	r26, r16
  3e:	6d 91       	ld	r22, X+
  40:	7c 91       	ld	r23, X
  42:	11 97       	sbiw	r26, 0x01	; 1
  44:	ee 15       	cp	r30, r14
  46:	ff 05       	cpc	r31, r15
  48:	01 f0       	breq	.+0      	; 0x4a <xEventGroupSetBits+0x4a>
  4a:	d2 80       	ldd	r13, Z+2	; 0x02
  4c:	c3 80       	ldd	r12, Z+3	; 0x03
  4e:	20 81       	ld	r18, Z
  50:	31 81       	ldd	r19, Z+1	; 0x01
  52:	c9 01       	movw	r24, r18
  54:	99 27       	eor	r25, r25
  56:	ac 01       	movw	r20, r24
  58:	46 23       	and	r20, r22
  5a:	57 23       	and	r21, r23
  5c:	32 fd       	sbrc	r19, 2
  5e:	00 c0       	rjmp	.+0      	; 0x60 <xEventGroupSetBits+0x60>
  60:	45 2b       	or	r20, r21
  62:	01 f4       	brne	.+0      	; 0x64 <xEventGroupSetBits+0x64>
  64:	00 c0       	rjmp	.+0      	; 0x66 <xEventGroupSetBits+0x66>
  66:	84 17       	cp	r24, r20
  68:	95 07       	cpc	r25, r21
  6a:	01 f4       	brne	.+0      	; 0x6c <xEventGroupSetBits+0x6c>
  6c:	30 ff       	sbrs	r19, 0
  6e:	00 c0       	rjmp	.+0      	; 0x70 <xEventGroupSetBits+0x70>
  70:	c8 2b       	or	r28, r24
  72:	d9 2b       	or	r29, r25
  74:	72 60       	ori	r23, 0x02	; 2
  76:	cf 01       	movw	r24, r30
  78:	0e 94 00 00 	call	0	; 0x0 <xEventGroupSetBits>
  7c:	ed 2d       	mov	r30, r13
  7e:	fc 2d       	mov	r31, r12
  80:	00 c0       	rjmp	.+0      	; 0x82 <xEventGroupSetBits+0x82>
  82:	c0 95       	com	r28
  84:	d0 95       	com	r29
  86:	6c 23       	and	r22, r28
  88:	7d 23       	and	r23, r29
  8a:	6d 93       	st	X+, r22
  8c:	7c 93       	st	X, r23
  8e:	0e 94 00 00 	call	0	; 0x0 <xEventGroupSetBits>
  92:	f8 01       	movw	r30, r16
  94:	80 81       	ld	r24, Z
  96:	91 81       	ldd	r25, Z+1	; 0x01
  98:	df 91       	pop	r29
  9a:	cf 91       	pop	r28
  9c:	1f 91       	pop	r17
  9e:	0f 91       	pop	r16
  a0:	ff 90       	pop	r15
  a2:	ef 90       	pop	r14
  a4:	df 90       	pop	r13
  a6:	cf 90       	pop	r12
  a8:	08 95       	ret

Disassembly of section .text.xEventGroupSync:

00000000 <xEventGroupSync>:
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	7c 01       	movw	r14, r24
  16:	eb 01       	movw	r28, r22
  18:	8a 01       	movw	r16, r20
  1a:	69 01       	movw	r12, r18
  1c:	0e 94 00 00 	call	0	; 0x0 <xEventGroupSync>
  20:	f7 01       	movw	r30, r14
  22:	a0 80       	ld	r10, Z
  24:	b1 80       	ldd	r11, Z+1	; 0x01
  26:	be 01       	movw	r22, r28
  28:	c7 01       	movw	r24, r14
  2a:	0e 94 00 00 	call	0	; 0x0 <xEventGroupSync>
  2e:	ca 29       	or	r28, r10
  30:	db 29       	or	r29, r11
  32:	ce 01       	movw	r24, r28
  34:	80 23       	and	r24, r16
  36:	91 23       	and	r25, r17
  38:	08 17       	cp	r16, r24
  3a:	19 07       	cpc	r17, r25
  3c:	01 f4       	brne	.+0      	; 0x3e <xEventGroupSync+0x3e>
  3e:	f7 01       	movw	r30, r14
  40:	20 81       	ld	r18, Z
  42:	31 81       	ldd	r19, Z+1	; 0x01
  44:	c8 01       	movw	r24, r16
  46:	80 95       	com	r24
  48:	90 95       	com	r25
  4a:	82 23       	and	r24, r18
  4c:	93 23       	and	r25, r19
  4e:	91 83       	std	Z+1, r25	; 0x01
  50:	80 83       	st	Z, r24
  52:	c1 2c       	mov	r12, r1
  54:	d1 2c       	mov	r13, r1
  56:	00 c0       	rjmp	.+0      	; 0x58 <xEventGroupSync+0x58>
  58:	c1 14       	cp	r12, r1
  5a:	d1 04       	cpc	r13, r1
  5c:	01 f0       	breq	.+0      	; 0x5e <xEventGroupSync+0x5e>
  5e:	a6 01       	movw	r20, r12
  60:	b8 01       	movw	r22, r16
  62:	75 60       	ori	r23, 0x05	; 5
  64:	c7 01       	movw	r24, r14
  66:	02 96       	adiw	r24, 0x02	; 2
  68:	0e 94 00 00 	call	0	; 0x0 <xEventGroupSync>
  6c:	c0 e0       	ldi	r28, 0x00	; 0
  6e:	d0 e0       	ldi	r29, 0x00	; 0
  70:	00 c0       	rjmp	.+0      	; 0x72 <xEventGroupSync+0x72>
  72:	f7 01       	movw	r30, r14
  74:	c0 81       	ld	r28, Z
  76:	d1 81       	ldd	r29, Z+1	; 0x01
  78:	0e 94 00 00 	call	0	; 0x0 <xEventGroupSync>
  7c:	cd 28       	or	r12, r13
  7e:	01 f0       	breq	.+0      	; 0x80 <xEventGroupSync+0x80>
  80:	81 11       	cpse	r24, r1
  82:	00 c0       	rjmp	.+0      	; 0x84 <xEventGroupSync+0x84>
  84:	0e 94 00 00 	call	0	; 0x0 <xEventGroupSync>
  88:	0e 94 00 00 	call	0	; 0x0 <xEventGroupSync>
  8c:	91 fd       	sbrc	r25, 1
  8e:	00 c0       	rjmp	.+0      	; 0x90 <xEventGroupSync+0x90>
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	f8 94       	cli
  94:	0f 92       	push	r0
  96:	f7 01       	movw	r30, r14
  98:	80 81       	ld	r24, Z
  9a:	91 81       	ldd	r25, Z+1	; 0x01
  9c:	98 01       	movw	r18, r16
  9e:	28 23       	and	r18, r24
  a0:	39 23       	and	r19, r25
  a2:	02 17       	cp	r16, r18
  a4:	13 07       	cpc	r17, r19
  a6:	01 f4       	brne	.+0      	; 0xa8 <xEventGroupSync+0xa8>
  a8:	a8 01       	movw	r20, r16
  aa:	40 95       	com	r20
  ac:	50 95       	com	r21
  ae:	48 23       	and	r20, r24
  b0:	59 23       	and	r21, r25
  b2:	51 83       	std	Z+1, r21	; 0x01
  b4:	40 83       	st	Z, r20
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	ec 01       	movw	r28, r24
  bc:	dd 27       	eor	r29, r29
  be:	ce 01       	movw	r24, r28
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	1f 91       	pop	r17
  c6:	0f 91       	pop	r16
  c8:	ff 90       	pop	r15
  ca:	ef 90       	pop	r14
  cc:	df 90       	pop	r13
  ce:	cf 90       	pop	r12
  d0:	bf 90       	pop	r11
  d2:	af 90       	pop	r10
  d4:	08 95       	ret

Disassembly of section .text.vEventGroupDelete:

00000000 <vEventGroupDelete>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <vEventGroupDelete>
   a:	8a 81       	ldd	r24, Y+2	; 0x02
   c:	88 23       	and	r24, r24
   e:	01 f0       	breq	.+0      	; 0x10 <vEventGroupDelete+0x10>
  10:	60 e0       	ldi	r22, 0x00	; 0
  12:	72 e0       	ldi	r23, 0x02	; 2
  14:	8f 81       	ldd	r24, Y+7	; 0x07
  16:	98 85       	ldd	r25, Y+8	; 0x08
  18:	0e 94 00 00 	call	0	; 0x0 <vEventGroupDelete>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <vEventGroupDelete+0x1e>
  1e:	ce 01       	movw	r24, r28
  20:	0e 94 00 00 	call	0	; 0x0 <vEventGroupDelete>
  24:	df 91       	pop	r29
  26:	cf 91       	pop	r28
  28:	0c 94 00 00 	jmp	0	; 0x0 <vEventGroupDelete>

Disassembly of section .text.vEventGroupSetBitsCallback:

00000000 <vEventGroupSetBitsCallback>:
   0:	ba 01       	movw	r22, r20
   2:	0c 94 00 00 	jmp	0	; 0x0 <vEventGroupSetBitsCallback>

Disassembly of section .text.vEventGroupClearBitsCallback:

00000000 <vEventGroupClearBitsCallback>:
   0:	ba 01       	movw	r22, r20
   2:	0c 94 00 00 	jmp	0	; 0x0 <vEventGroupClearBitsCallback>

list.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .text.vListInitialise 0000001c  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .text.vListInitialiseItem 00000008  00000000  00000000  00000050  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .text.vListInsertEnd 00000042  00000000  00000000  00000058  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.vListInsert 00000070  00000000  00000000  0000009a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.uxListRemove 00000046  00000000  00000000  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .comment      00000012  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY

Disassembly of section .text.vListInitialise:

00000000 <vListInitialise>:
   0:	fc 01       	movw	r30, r24
   2:	03 96       	adiw	r24, 0x03	; 3
   4:	92 83       	std	Z+2, r25	; 0x02
   6:	81 83       	std	Z+1, r24	; 0x01
   8:	2f ef       	ldi	r18, 0xFF	; 255
   a:	3f ef       	ldi	r19, 0xFF	; 255
   c:	34 83       	std	Z+4, r19	; 0x04
   e:	23 83       	std	Z+3, r18	; 0x03
  10:	96 83       	std	Z+6, r25	; 0x06
  12:	85 83       	std	Z+5, r24	; 0x05
  14:	90 87       	std	Z+8, r25	; 0x08
  16:	87 83       	std	Z+7, r24	; 0x07
  18:	10 82       	st	Z, r1
  1a:	08 95       	ret

Disassembly of section .text.vListInitialiseItem:

00000000 <vListInitialiseItem>:
   0:	fc 01       	movw	r30, r24
   2:	11 86       	std	Z+9, r1	; 0x09
   4:	10 86       	std	Z+8, r1	; 0x08
   6:	08 95       	ret

Disassembly of section .text.vListInsertEnd:

00000000 <vListInsertEnd>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	9c 01       	movw	r18, r24
   6:	fb 01       	movw	r30, r22
   8:	dc 01       	movw	r26, r24
   a:	11 96       	adiw	r26, 0x01	; 1
   c:	cd 91       	ld	r28, X+
   e:	dc 91       	ld	r29, X
  10:	12 97       	sbiw	r26, 0x02	; 2
  12:	d3 83       	std	Z+3, r29	; 0x03
  14:	c2 83       	std	Z+2, r28	; 0x02
  16:	8c 81       	ldd	r24, Y+4	; 0x04
  18:	9d 81       	ldd	r25, Y+5	; 0x05
  1a:	95 83       	std	Z+5, r25	; 0x05
  1c:	84 83       	std	Z+4, r24	; 0x04
  1e:	8c 81       	ldd	r24, Y+4	; 0x04
  20:	9d 81       	ldd	r25, Y+5	; 0x05
  22:	dc 01       	movw	r26, r24
  24:	13 96       	adiw	r26, 0x03	; 3
  26:	7c 93       	st	X, r23
  28:	6e 93       	st	-X, r22
  2a:	12 97       	sbiw	r26, 0x02	; 2
  2c:	7d 83       	std	Y+5, r23	; 0x05
  2e:	6c 83       	std	Y+4, r22	; 0x04
  30:	31 87       	std	Z+9, r19	; 0x09
  32:	20 87       	std	Z+8, r18	; 0x08
  34:	f9 01       	movw	r30, r18
  36:	80 81       	ld	r24, Z
  38:	8f 5f       	subi	r24, 0xFF	; 255
  3a:	80 83       	st	Z, r24
  3c:	df 91       	pop	r29
  3e:	cf 91       	pop	r28
  40:	08 95       	ret

Disassembly of section .text.vListInsert:

00000000 <vListInsert>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
   a:	fb 01       	movw	r30, r22
   c:	80 81       	ld	r24, Z
   e:	91 81       	ldd	r25, Z+1	; 0x01
  10:	8f 3f       	cpi	r24, 0xFF	; 255
  12:	2f ef       	ldi	r18, 0xFF	; 255
  14:	92 07       	cpc	r25, r18
  16:	01 f4       	brne	.+0      	; 0x18 <vListInsert+0x18>
  18:	e8 01       	movw	r28, r16
  1a:	af 81       	ldd	r26, Y+7	; 0x07
  1c:	b8 85       	ldd	r27, Y+8	; 0x08
  1e:	00 c0       	rjmp	.+0      	; 0x20 <vListInsert+0x20>
  20:	d8 01       	movw	r26, r16
  22:	13 96       	adiw	r26, 0x03	; 3
  24:	12 96       	adiw	r26, 0x02	; 2
  26:	2d 91       	ld	r18, X+
  28:	3c 91       	ld	r19, X
  2a:	13 97       	sbiw	r26, 0x03	; 3
  2c:	e9 01       	movw	r28, r18
  2e:	48 81       	ld	r20, Y
  30:	59 81       	ldd	r21, Y+1	; 0x01
  32:	84 17       	cp	r24, r20
  34:	95 07       	cpc	r25, r21
  36:	00 f0       	brcs	.+0      	; 0x38 <vListInsert+0x38>
  38:	d9 01       	movw	r26, r18
  3a:	00 c0       	rjmp	.+0      	; 0x3c <vListInsert+0x3c>
  3c:	12 96       	adiw	r26, 0x02	; 2
  3e:	8d 91       	ld	r24, X+
  40:	9c 91       	ld	r25, X
  42:	13 97       	sbiw	r26, 0x03	; 3
  44:	93 83       	std	Z+3, r25	; 0x03
  46:	82 83       	std	Z+2, r24	; 0x02
  48:	ec 01       	movw	r28, r24
  4a:	fd 83       	std	Y+5, r31	; 0x05
  4c:	ec 83       	std	Y+4, r30	; 0x04
  4e:	b5 83       	std	Z+5, r27	; 0x05
  50:	a4 83       	std	Z+4, r26	; 0x04
  52:	13 96       	adiw	r26, 0x03	; 3
  54:	fc 93       	st	X, r31
  56:	ee 93       	st	-X, r30
  58:	12 97       	sbiw	r26, 0x02	; 2
  5a:	11 87       	std	Z+9, r17	; 0x09
  5c:	00 87       	std	Z+8, r16	; 0x08
  5e:	f8 01       	movw	r30, r16
  60:	80 81       	ld	r24, Z
  62:	8f 5f       	subi	r24, 0xFF	; 255
  64:	80 83       	st	Z, r24
  66:	df 91       	pop	r29
  68:	cf 91       	pop	r28
  6a:	1f 91       	pop	r17
  6c:	0f 91       	pop	r16
  6e:	08 95       	ret

Disassembly of section .text.uxListRemove:

00000000 <uxListRemove>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	a0 85       	ldd	r26, Z+8	; 0x08
   8:	b1 85       	ldd	r27, Z+9	; 0x09
   a:	82 81       	ldd	r24, Z+2	; 0x02
   c:	93 81       	ldd	r25, Z+3	; 0x03
   e:	24 81       	ldd	r18, Z+4	; 0x04
  10:	35 81       	ldd	r19, Z+5	; 0x05
  12:	ec 01       	movw	r28, r24
  14:	3d 83       	std	Y+5, r19	; 0x05
  16:	2c 83       	std	Y+4, r18	; 0x04
  18:	c4 81       	ldd	r28, Z+4	; 0x04
  1a:	d5 81       	ldd	r29, Z+5	; 0x05
  1c:	9b 83       	std	Y+3, r25	; 0x03
  1e:	8a 83       	std	Y+2, r24	; 0x02
  20:	11 96       	adiw	r26, 0x01	; 1
  22:	8d 91       	ld	r24, X+
  24:	9c 91       	ld	r25, X
  26:	12 97       	sbiw	r26, 0x02	; 2
  28:	e8 17       	cp	r30, r24
  2a:	f9 07       	cpc	r31, r25
  2c:	01 f4       	brne	.+0      	; 0x2e <uxListRemove+0x2e>
  2e:	12 96       	adiw	r26, 0x02	; 2
  30:	dc 93       	st	X, r29
  32:	ce 93       	st	-X, r28
  34:	11 97       	sbiw	r26, 0x01	; 1
  36:	11 86       	std	Z+9, r1	; 0x09
  38:	10 86       	std	Z+8, r1	; 0x08
  3a:	8c 91       	ld	r24, X
  3c:	81 50       	subi	r24, 0x01	; 1
  3e:	8c 93       	st	X, r24
  40:	df 91       	pop	r29
  42:	cf 91       	pop	r28
  44:	08 95       	ret

queue.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .text.prvCopyDataToQueue 00000094  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  4 .text.prvCopyDataFromQueue 00000034  00000000  00000000  000000c8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  5 .text.prvUnlockQueue 0000007c  00000000  00000000  000000fc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.xQueueGenericReset 00000074  00000000  00000000  00000178  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.xQueueGenericCreate 00000052  00000000  00000000  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.xQueueGenericSend 00000134  00000000  00000000  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.xQueueGenericSendFromISR 0000005c  00000000  00000000  00000372  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.xQueueGiveFromISR 0000004a  00000000  00000000  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.xQueueGenericReceive 00000148  00000000  00000000  00000418  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.xQueueReceiveFromISR 0000005a  00000000  00000000  00000560  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.xQueuePeekFromISR 0000002e  00000000  00000000  000005ba  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text.uxQueueMessagesWaiting 00000010  00000000  00000000  000005e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.uxQueueSpacesAvailable 00000014  00000000  00000000  000005f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.uxQueueMessagesWaitingFromISR 00000006  00000000  00000000  0000060c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.vQueueDelete 00000004  00000000  00000000  00000612  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text.xQueueIsQueueEmptyFromISR 0000000c  00000000  00000000  00000616  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.xQueueIsQueueFullFromISR 0000000e  00000000  00000000  00000622  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.xQueueCRSend 0000006e  00000000  00000000  00000630  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text.xQueueCRReceive 0000008e  00000000  00000000  0000069e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text.xQueueCRSendFromISR 00000046  00000000  00000000  0000072c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text.xQueueCRReceiveFromISR 0000007a  00000000  00000000  00000772  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .comment      00000012  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY

Disassembly of section .text.prvCopyDataToQueue:

00000000 <prvCopyDataToQueue>:
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	ec 01       	movw	r28, r24
   8:	14 2f       	mov	r17, r20
   a:	4c 8d       	ldd	r20, Y+28	; 0x1c
   c:	44 23       	and	r20, r20
   e:	01 f0       	breq	.+0      	; 0x10 <prvCopyDataToQueue+0x10>
  10:	50 e0       	ldi	r21, 0x00	; 0
  12:	11 11       	cpse	r17, r1
  14:	00 c0       	rjmp	.+0      	; 0x16 <prvCopyDataToQueue+0x16>
  16:	8c 81       	ldd	r24, Y+4	; 0x04
  18:	9d 81       	ldd	r25, Y+5	; 0x05
  1a:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
  1e:	2c 8d       	ldd	r18, Y+28	; 0x1c
  20:	8c 81       	ldd	r24, Y+4	; 0x04
  22:	9d 81       	ldd	r25, Y+5	; 0x05
  24:	82 0f       	add	r24, r18
  26:	91 1d       	adc	r25, r1
  28:	9d 83       	std	Y+5, r25	; 0x05
  2a:	8c 83       	std	Y+4, r24	; 0x04
  2c:	2a 81       	ldd	r18, Y+2	; 0x02
  2e:	3b 81       	ldd	r19, Y+3	; 0x03
  30:	82 17       	cp	r24, r18
  32:	93 07       	cpc	r25, r19
  34:	00 f0       	brcs	.+0      	; 0x36 <prvCopyDataToQueue+0x36>
  36:	88 81       	ld	r24, Y
  38:	99 81       	ldd	r25, Y+1	; 0x01
  3a:	9d 83       	std	Y+5, r25	; 0x05
  3c:	8c 83       	std	Y+4, r24	; 0x04
  3e:	00 c0       	rjmp	.+0      	; 0x40 <prvCopyDataToQueue+0x40>
  40:	8e 81       	ldd	r24, Y+6	; 0x06
  42:	9f 81       	ldd	r25, Y+7	; 0x07
  44:	0e 94 00 00 	call	0	; 0x0 <prvCopyDataToQueue>
  48:	8c 8d       	ldd	r24, Y+28	; 0x1c
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	91 95       	neg	r25
  4e:	81 95       	neg	r24
  50:	91 09       	sbc	r25, r1
  52:	2e 81       	ldd	r18, Y+6	; 0x06
  54:	3f 81       	ldd	r19, Y+7	; 0x07
  56:	28 0f       	add	r18, r24
  58:	39 1f       	adc	r19, r25
  5a:	3f 83       	std	Y+7, r19	; 0x07
  5c:	2e 83       	std	Y+6, r18	; 0x06
  5e:	48 81       	ld	r20, Y
  60:	59 81       	ldd	r21, Y+1	; 0x01
  62:	24 17       	cp	r18, r20
  64:	35 07       	cpc	r19, r21
  66:	00 f4       	brcc	.+0      	; 0x68 <prvCopyDataToQueue+0x68>
  68:	2a 81       	ldd	r18, Y+2	; 0x02
  6a:	3b 81       	ldd	r19, Y+3	; 0x03
  6c:	82 0f       	add	r24, r18
  6e:	93 1f       	adc	r25, r19
  70:	9f 83       	std	Y+7, r25	; 0x07
  72:	8e 83       	std	Y+6, r24	; 0x06
  74:	12 30       	cpi	r17, 0x02	; 2
  76:	01 f4       	brne	.+0      	; 0x78 <prvCopyDataToQueue+0x78>
  78:	8a 8d       	ldd	r24, Y+26	; 0x1a
  7a:	88 23       	and	r24, r24
  7c:	01 f0       	breq	.+0      	; 0x7e <prvCopyDataToQueue+0x7e>
  7e:	8a 8d       	ldd	r24, Y+26	; 0x1a
  80:	81 50       	subi	r24, 0x01	; 1
  82:	8a 8f       	std	Y+26, r24	; 0x1a
  84:	8a 8d       	ldd	r24, Y+26	; 0x1a
  86:	8f 5f       	subi	r24, 0xFF	; 255
  88:	8a 8f       	std	Y+26, r24	; 0x1a
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	df 91       	pop	r29
  8e:	cf 91       	pop	r28
  90:	1f 91       	pop	r17
  92:	08 95       	ret

Disassembly of section .text.prvCopyDataFromQueue:

00000000 <prvCopyDataFromQueue>:
   0:	fc 01       	movw	r30, r24
   2:	cb 01       	movw	r24, r22
   4:	44 8d       	ldd	r20, Z+28	; 0x1c
   6:	44 23       	and	r20, r20
   8:	01 f0       	breq	.+0      	; 0xa <prvCopyDataFromQueue+0xa>
   a:	50 e0       	ldi	r21, 0x00	; 0
   c:	26 81       	ldd	r18, Z+6	; 0x06
   e:	37 81       	ldd	r19, Z+7	; 0x07
  10:	24 0f       	add	r18, r20
  12:	35 1f       	adc	r19, r21
  14:	37 83       	std	Z+7, r19	; 0x07
  16:	26 83       	std	Z+6, r18	; 0x06
  18:	62 81       	ldd	r22, Z+2	; 0x02
  1a:	73 81       	ldd	r23, Z+3	; 0x03
  1c:	26 17       	cp	r18, r22
  1e:	37 07       	cpc	r19, r23
  20:	00 f0       	brcs	.+0      	; 0x22 <prvCopyDataFromQueue+0x22>
  22:	20 81       	ld	r18, Z
  24:	31 81       	ldd	r19, Z+1	; 0x01
  26:	37 83       	std	Z+7, r19	; 0x07
  28:	26 83       	std	Z+6, r18	; 0x06
  2a:	66 81       	ldd	r22, Z+6	; 0x06
  2c:	77 81       	ldd	r23, Z+7	; 0x07
  2e:	0c 94 00 00 	jmp	0	; 0x0 <prvCopyDataFromQueue>
  32:	08 95       	ret

Disassembly of section .text.prvUnlockQueue:

00000000 <prvUnlockQueue>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	0f 92       	push	r0
  10:	8c 01       	movw	r16, r24
  12:	0f 5e       	subi	r16, 0xEF	; 239
  14:	1f 4f       	sbci	r17, 0xFF	; 255
  16:	8e 8d       	ldd	r24, Y+30	; 0x1e
  18:	18 16       	cp	r1, r24
  1a:	04 f4       	brge	.+0      	; 0x1c <prvUnlockQueue+0x1c>
  1c:	89 89       	ldd	r24, Y+17	; 0x11
  1e:	88 23       	and	r24, r24
  20:	01 f0       	breq	.+0      	; 0x22 <prvUnlockQueue+0x22>
  22:	c8 01       	movw	r24, r16
  24:	0e 94 00 00 	call	0	; 0x0 <prvUnlockQueue>
  28:	81 11       	cpse	r24, r1
  2a:	0e 94 00 00 	call	0	; 0x0 <prvUnlockQueue>
  2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
  30:	81 50       	subi	r24, 0x01	; 1
  32:	8e 8f       	std	Y+30, r24	; 0x1e
  34:	00 c0       	rjmp	.+0      	; 0x36 <prvUnlockQueue+0x36>
  36:	8f ef       	ldi	r24, 0xFF	; 255
  38:	8e 8f       	std	Y+30, r24	; 0x1e
  3a:	0f 90       	pop	r0
  3c:	0f be       	out	0x3f, r0	; 63
  3e:	0f b6       	in	r0, 0x3f	; 63
  40:	f8 94       	cli
  42:	0f 92       	push	r0
  44:	8e 01       	movw	r16, r28
  46:	08 5f       	subi	r16, 0xF8	; 248
  48:	1f 4f       	sbci	r17, 0xFF	; 255
  4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
  4c:	18 16       	cp	r1, r24
  4e:	04 f4       	brge	.+0      	; 0x50 <prvUnlockQueue+0x50>
  50:	88 85       	ldd	r24, Y+8	; 0x08
  52:	88 23       	and	r24, r24
  54:	01 f0       	breq	.+0      	; 0x56 <prvUnlockQueue+0x56>
  56:	c8 01       	movw	r24, r16
  58:	0e 94 00 00 	call	0	; 0x0 <prvUnlockQueue>
  5c:	81 11       	cpse	r24, r1
  5e:	0e 94 00 00 	call	0	; 0x0 <prvUnlockQueue>
  62:	8d 8d       	ldd	r24, Y+29	; 0x1d
  64:	81 50       	subi	r24, 0x01	; 1
  66:	8d 8f       	std	Y+29, r24	; 0x1d
  68:	00 c0       	rjmp	.+0      	; 0x6a <prvUnlockQueue+0x6a>
  6a:	8f ef       	ldi	r24, 0xFF	; 255
  6c:	8d 8f       	std	Y+29, r24	; 0x1d
  6e:	0f 90       	pop	r0
  70:	0f be       	out	0x3f, r0	; 63
  72:	df 91       	pop	r29
  74:	cf 91       	pop	r28
  76:	1f 91       	pop	r17
  78:	0f 91       	pop	r16
  7a:	08 95       	ret

Disassembly of section .text.xQueueGenericReset:

00000000 <xQueueGenericReset>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	0f b6       	in	r0, 0x3f	; 63
   8:	f8 94       	cli
   a:	0f 92       	push	r0
   c:	28 81       	ld	r18, Y
   e:	39 81       	ldd	r19, Y+1	; 0x01
  10:	9b 8d       	ldd	r25, Y+27	; 0x1b
  12:	4c 8d       	ldd	r20, Y+28	; 0x1c
  14:	94 9f       	mul	r25, r20
  16:	c0 01       	movw	r24, r0
  18:	11 24       	eor	r1, r1
  1a:	f9 01       	movw	r30, r18
  1c:	e8 0f       	add	r30, r24
  1e:	f9 1f       	adc	r31, r25
  20:	fb 83       	std	Y+3, r31	; 0x03
  22:	ea 83       	std	Y+2, r30	; 0x02
  24:	1a 8e       	std	Y+26, r1	; 0x1a
  26:	3d 83       	std	Y+5, r19	; 0x05
  28:	2c 83       	std	Y+4, r18	; 0x04
  2a:	84 1b       	sub	r24, r20
  2c:	91 09       	sbc	r25, r1
  2e:	82 0f       	add	r24, r18
  30:	93 1f       	adc	r25, r19
  32:	9f 83       	std	Y+7, r25	; 0x07
  34:	8e 83       	std	Y+6, r24	; 0x06
  36:	8f ef       	ldi	r24, 0xFF	; 255
  38:	8d 8f       	std	Y+29, r24	; 0x1d
  3a:	8e 8f       	std	Y+30, r24	; 0x1e
  3c:	61 11       	cpse	r22, r1
  3e:	00 c0       	rjmp	.+0      	; 0x40 <xQueueGenericReset+0x40>
  40:	88 85       	ldd	r24, Y+8	; 0x08
  42:	88 23       	and	r24, r24
  44:	01 f0       	breq	.+0      	; 0x46 <xQueueGenericReset+0x46>
  46:	ce 01       	movw	r24, r28
  48:	08 96       	adiw	r24, 0x08	; 8
  4a:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericReset>
  4e:	81 30       	cpi	r24, 0x01	; 1
  50:	01 f4       	brne	.+0      	; 0x52 <xQueueGenericReset+0x52>
  52:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericReset>
  56:	00 c0       	rjmp	.+0      	; 0x58 <xQueueGenericReset+0x58>
  58:	ce 01       	movw	r24, r28
  5a:	08 96       	adiw	r24, 0x08	; 8
  5c:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericReset>
  60:	ce 01       	movw	r24, r28
  62:	41 96       	adiw	r24, 0x11	; 17
  64:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericReset>
  68:	0f 90       	pop	r0
  6a:	0f be       	out	0x3f, r0	; 63
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	df 91       	pop	r29
  70:	cf 91       	pop	r28
  72:	08 95       	ret

Disassembly of section .text.xQueueGenericCreate:

00000000 <xQueueGenericCreate>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	08 2f       	mov	r16, r24
   a:	16 2f       	mov	r17, r22
   c:	66 23       	and	r22, r22
   e:	01 f0       	breq	.+0      	; 0x10 <xQueueGenericCreate+0x10>
  10:	86 9f       	mul	r24, r22
  12:	c0 01       	movw	r24, r0
  14:	11 24       	eor	r1, r1
  16:	01 96       	adiw	r24, 0x01	; 1
  18:	00 c0       	rjmp	.+0      	; 0x1a <xQueueGenericCreate+0x1a>
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	4f 96       	adiw	r24, 0x1f	; 31
  20:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericCreate>
  24:	ec 01       	movw	r28, r24
  26:	00 97       	sbiw	r24, 0x00	; 0
  28:	01 f0       	breq	.+0      	; 0x2a <xQueueGenericCreate+0x2a>
  2a:	11 11       	cpse	r17, r1
  2c:	00 c0       	rjmp	.+0      	; 0x2e <xQueueGenericCreate+0x2e>
  2e:	99 83       	std	Y+1, r25	; 0x01
  30:	88 83       	st	Y, r24
  32:	00 c0       	rjmp	.+0      	; 0x34 <xQueueGenericCreate+0x34>
  34:	4f 96       	adiw	r24, 0x1f	; 31
  36:	99 83       	std	Y+1, r25	; 0x01
  38:	88 83       	st	Y, r24
  3a:	0b 8f       	std	Y+27, r16	; 0x1b
  3c:	1c 8f       	std	Y+28, r17	; 0x1c
  3e:	61 e0       	ldi	r22, 0x01	; 1
  40:	ce 01       	movw	r24, r28
  42:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericCreate>
  46:	ce 01       	movw	r24, r28
  48:	df 91       	pop	r29
  4a:	cf 91       	pop	r28
  4c:	1f 91       	pop	r17
  4e:	0f 91       	pop	r16
  50:	08 95       	ret

Disassembly of section .text.xQueueGenericSend:

00000000 <xQueueGenericSend>:
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	00 d0       	rcall	.+0      	; 0x14 <xQueueGenericSend+0x14>
  14:	00 d0       	rcall	.+0      	; 0x16 <xQueueGenericSend+0x16>
  16:	1f 92       	push	r1
  18:	cd b7       	in	r28, 0x3d	; 61
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	8c 01       	movw	r16, r24
  1e:	6b 01       	movw	r12, r22
  20:	5d 83       	std	Y+5, r21	; 0x05
  22:	4c 83       	std	Y+4, r20	; 0x04
  24:	f2 2e       	mov	r15, r18
  26:	80 e0       	ldi	r24, 0x00	; 0
  28:	58 01       	movw	r10, r16
  2a:	98 e0       	ldi	r25, 0x08	; 8
  2c:	a9 0e       	add	r10, r25
  2e:	b1 1c       	adc	r11, r1
  30:	0f b6       	in	r0, 0x3f	; 63
  32:	f8 94       	cli
  34:	0f 92       	push	r0
  36:	f8 01       	movw	r30, r16
  38:	22 8d       	ldd	r18, Z+26	; 0x1a
  3a:	93 8d       	ldd	r25, Z+27	; 0x1b
  3c:	29 17       	cp	r18, r25
  3e:	00 f0       	brcs	.+0      	; 0x40 <xQueueGenericSend+0x40>
  40:	f2 e0       	ldi	r31, 0x02	; 2
  42:	ff 12       	cpse	r15, r31
  44:	00 c0       	rjmp	.+0      	; 0x46 <xQueueGenericSend+0x46>
  46:	4f 2d       	mov	r20, r15
  48:	b6 01       	movw	r22, r12
  4a:	c8 01       	movw	r24, r16
  4c:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericSend>
  50:	f8 01       	movw	r30, r16
  52:	91 89       	ldd	r25, Z+17	; 0x11
  54:	99 23       	and	r25, r25
  56:	01 f0       	breq	.+0      	; 0x58 <xQueueGenericSend+0x58>
  58:	c8 01       	movw	r24, r16
  5a:	41 96       	adiw	r24, 0x11	; 17
  5c:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericSend>
  60:	81 30       	cpi	r24, 0x01	; 1
  62:	01 f4       	brne	.+0      	; 0x64 <xQueueGenericSend+0x64>
  64:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericSend>
  68:	00 c0       	rjmp	.+0      	; 0x6a <xQueueGenericSend+0x6a>
  6a:	81 11       	cpse	r24, r1
  6c:	00 c0       	rjmp	.+0      	; 0x6e <xQueueGenericSend+0x6e>
  6e:	0f 90       	pop	r0
  70:	0f be       	out	0x3f, r0	; 63
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	00 c0       	rjmp	.+0      	; 0x76 <xQueueGenericSend+0x76>
  76:	2c 81       	ldd	r18, Y+4	; 0x04
  78:	3d 81       	ldd	r19, Y+5	; 0x05
  7a:	23 2b       	or	r18, r19
  7c:	01 f4       	brne	.+0      	; 0x7e <xQueueGenericSend+0x7e>
  7e:	0f 90       	pop	r0
  80:	0f be       	out	0x3f, r0	; 63
  82:	00 c0       	rjmp	.+0      	; 0x84 <xQueueGenericSend+0x84>
  84:	81 11       	cpse	r24, r1
  86:	00 c0       	rjmp	.+0      	; 0x88 <xQueueGenericSend+0x88>
  88:	ce 01       	movw	r24, r28
  8a:	01 96       	adiw	r24, 0x01	; 1
  8c:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericSend>
  90:	0f 90       	pop	r0
  92:	0f be       	out	0x3f, r0	; 63
  94:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericSend>
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	f8 94       	cli
  9c:	0f 92       	push	r0
  9e:	f8 01       	movw	r30, r16
  a0:	85 8d       	ldd	r24, Z+29	; 0x1d
  a2:	8f 3f       	cpi	r24, 0xFF	; 255
  a4:	01 f4       	brne	.+0      	; 0xa6 <xQueueGenericSend+0xa6>
  a6:	15 8e       	std	Z+29, r1	; 0x1d
  a8:	f8 01       	movw	r30, r16
  aa:	86 8d       	ldd	r24, Z+30	; 0x1e
  ac:	8f 3f       	cpi	r24, 0xFF	; 255
  ae:	01 f4       	brne	.+0      	; 0xb0 <xQueueGenericSend+0xb0>
  b0:	16 8e       	std	Z+30, r1	; 0x1e
  b2:	0f 90       	pop	r0
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	be 01       	movw	r22, r28
  b8:	6c 5f       	subi	r22, 0xFC	; 252
  ba:	7f 4f       	sbci	r23, 0xFF	; 255
  bc:	ce 01       	movw	r24, r28
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericSend>
  c4:	81 11       	cpse	r24, r1
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <xQueueGenericSend+0xc8>
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	0f 92       	push	r0
  ce:	f8 01       	movw	r30, r16
  d0:	92 8d       	ldd	r25, Z+26	; 0x1a
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	83 8d       	ldd	r24, Z+27	; 0x1b
  d8:	98 13       	cpse	r25, r24
  da:	00 c0       	rjmp	.+0      	; 0xdc <xQueueGenericSend+0xdc>
  dc:	6c 81       	ldd	r22, Y+4	; 0x04
  de:	7d 81       	ldd	r23, Y+5	; 0x05
  e0:	c5 01       	movw	r24, r10
  e2:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericSend>
  e6:	c8 01       	movw	r24, r16
  e8:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericSend>
  ec:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericSend>
  f0:	88 23       	and	r24, r24
  f2:	01 f0       	breq	.+0      	; 0xf4 <xQueueGenericSend+0xf4>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <xQueueGenericSend+0xf8>
  f8:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericSend>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <xQueueGenericSend+0xfe>
  fe:	c8 01       	movw	r24, r16
 100:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericSend>
 104:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericSend>
 108:	00 c0       	rjmp	.+0      	; 0x10a <xQueueGenericSend+0x10a>
 10a:	c8 01       	movw	r24, r16
 10c:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericSend>
 110:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericSend>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	0f 90       	pop	r0
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	ff 90       	pop	r15
 12a:	df 90       	pop	r13
 12c:	cf 90       	pop	r12
 12e:	bf 90       	pop	r11
 130:	af 90       	pop	r10
 132:	08 95       	ret

Disassembly of section .text.xQueueGenericSendFromISR:

00000000 <xQueueGenericSendFromISR>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	9a 8d       	ldd	r25, Y+26	; 0x1a
   c:	8b 8d       	ldd	r24, Y+27	; 0x1b
   e:	98 17       	cp	r25, r24
  10:	00 f0       	brcs	.+0      	; 0x12 <xQueueGenericSendFromISR+0x12>
  12:	22 30       	cpi	r18, 0x02	; 2
  14:	01 f4       	brne	.+0      	; 0x16 <xQueueGenericSendFromISR+0x16>
  16:	8a 01       	movw	r16, r20
  18:	42 2f       	mov	r20, r18
  1a:	ce 01       	movw	r24, r28
  1c:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericSendFromISR>
  20:	8e 8d       	ldd	r24, Y+30	; 0x1e
  22:	8f 3f       	cpi	r24, 0xFF	; 255
  24:	01 f4       	brne	.+0      	; 0x26 <xQueueGenericSendFromISR+0x26>
  26:	89 89       	ldd	r24, Y+17	; 0x11
  28:	88 23       	and	r24, r24
  2a:	01 f0       	breq	.+0      	; 0x2c <xQueueGenericSendFromISR+0x2c>
  2c:	ce 01       	movw	r24, r28
  2e:	41 96       	adiw	r24, 0x11	; 17
  30:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericSendFromISR>
  34:	88 23       	and	r24, r24
  36:	01 f0       	breq	.+0      	; 0x38 <xQueueGenericSendFromISR+0x38>
  38:	01 15       	cp	r16, r1
  3a:	11 05       	cpc	r17, r1
  3c:	01 f0       	breq	.+0      	; 0x3e <xQueueGenericSendFromISR+0x3e>
  3e:	81 e0       	ldi	r24, 0x01	; 1
  40:	f8 01       	movw	r30, r16
  42:	80 83       	st	Z, r24
  44:	00 c0       	rjmp	.+0      	; 0x46 <xQueueGenericSendFromISR+0x46>
  46:	8e 8d       	ldd	r24, Y+30	; 0x1e
  48:	8f 5f       	subi	r24, 0xFF	; 255
  4a:	8e 8f       	std	Y+30, r24	; 0x1e
  4c:	81 e0       	ldi	r24, 0x01	; 1
  4e:	00 c0       	rjmp	.+0      	; 0x50 <xQueueGenericSendFromISR+0x50>
  50:	80 e0       	ldi	r24, 0x00	; 0
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	1f 91       	pop	r17
  58:	0f 91       	pop	r16
  5a:	08 95       	ret

Disassembly of section .text.xQueueGiveFromISR:

00000000 <xQueueGiveFromISR>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	92 8d       	ldd	r25, Z+26	; 0x1a
   8:	83 8d       	ldd	r24, Z+27	; 0x1b
   a:	98 17       	cp	r25, r24
   c:	00 f4       	brcc	.+0      	; 0xe <xQueueGiveFromISR+0xe>
   e:	82 8d       	ldd	r24, Z+26	; 0x1a
  10:	8f 5f       	subi	r24, 0xFF	; 255
  12:	82 8f       	std	Z+26, r24	; 0x1a
  14:	86 8d       	ldd	r24, Z+30	; 0x1e
  16:	8f 3f       	cpi	r24, 0xFF	; 255
  18:	01 f4       	brne	.+0      	; 0x1a <xQueueGiveFromISR+0x1a>
  1a:	81 89       	ldd	r24, Z+17	; 0x11
  1c:	88 23       	and	r24, r24
  1e:	01 f0       	breq	.+0      	; 0x20 <xQueueGiveFromISR+0x20>
  20:	eb 01       	movw	r28, r22
  22:	cf 01       	movw	r24, r30
  24:	41 96       	adiw	r24, 0x11	; 17
  26:	0e 94 00 00 	call	0	; 0x0 <xQueueGiveFromISR>
  2a:	88 23       	and	r24, r24
  2c:	01 f0       	breq	.+0      	; 0x2e <xQueueGiveFromISR+0x2e>
  2e:	20 97       	sbiw	r28, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <xQueueGiveFromISR+0x32>
  32:	81 e0       	ldi	r24, 0x01	; 1
  34:	88 83       	st	Y, r24
  36:	00 c0       	rjmp	.+0      	; 0x38 <xQueueGiveFromISR+0x38>
  38:	86 8d       	ldd	r24, Z+30	; 0x1e
  3a:	8f 5f       	subi	r24, 0xFF	; 255
  3c:	86 8f       	std	Z+30, r24	; 0x1e
  3e:	81 e0       	ldi	r24, 0x01	; 1
  40:	00 c0       	rjmp	.+0      	; 0x42 <xQueueGiveFromISR+0x42>
  42:	80 e0       	ldi	r24, 0x00	; 0
  44:	df 91       	pop	r29
  46:	cf 91       	pop	r28
  48:	08 95       	ret

Disassembly of section .text.xQueueGenericReceive:

00000000 <xQueueGenericReceive>:
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	00 d0       	rcall	.+0      	; 0x14 <xQueueGenericReceive+0x14>
  14:	00 d0       	rcall	.+0      	; 0x16 <xQueueGenericReceive+0x16>
  16:	1f 92       	push	r1
  18:	cd b7       	in	r28, 0x3d	; 61
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	8c 01       	movw	r16, r24
  1e:	7b 01       	movw	r14, r22
  20:	5d 83       	std	Y+5, r21	; 0x05
  22:	4c 83       	std	Y+4, r20	; 0x04
  24:	d2 2e       	mov	r13, r18
  26:	80 e0       	ldi	r24, 0x00	; 0
  28:	58 01       	movw	r10, r16
  2a:	91 e1       	ldi	r25, 0x11	; 17
  2c:	a9 0e       	add	r10, r25
  2e:	b1 1c       	adc	r11, r1
  30:	0f b6       	in	r0, 0x3f	; 63
  32:	f8 94       	cli
  34:	0f 92       	push	r0
  36:	f8 01       	movw	r30, r16
  38:	92 8d       	ldd	r25, Z+26	; 0x1a
  3a:	99 23       	and	r25, r25
  3c:	01 f0       	breq	.+0      	; 0x3e <xQueueGenericReceive+0x3e>
  3e:	a6 80       	ldd	r10, Z+6	; 0x06
  40:	b7 80       	ldd	r11, Z+7	; 0x07
  42:	b7 01       	movw	r22, r14
  44:	c8 01       	movw	r24, r16
  46:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericReceive>
  4a:	f8 01       	movw	r30, r16
  4c:	d1 10       	cpse	r13, r1
  4e:	00 c0       	rjmp	.+0      	; 0x50 <xQueueGenericReceive+0x50>
  50:	82 8d       	ldd	r24, Z+26	; 0x1a
  52:	81 50       	subi	r24, 0x01	; 1
  54:	82 8f       	std	Z+26, r24	; 0x1a
  56:	80 85       	ldd	r24, Z+8	; 0x08
  58:	88 23       	and	r24, r24
  5a:	01 f0       	breq	.+0      	; 0x5c <xQueueGenericReceive+0x5c>
  5c:	c8 01       	movw	r24, r16
  5e:	08 96       	adiw	r24, 0x08	; 8
  60:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericReceive>
  64:	81 30       	cpi	r24, 0x01	; 1
  66:	01 f4       	brne	.+0      	; 0x68 <xQueueGenericReceive+0x68>
  68:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericReceive>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <xQueueGenericReceive+0x6e>
  6e:	b7 82       	std	Z+7, r11	; 0x07
  70:	a6 82       	std	Z+6, r10	; 0x06
  72:	81 89       	ldd	r24, Z+17	; 0x11
  74:	88 23       	and	r24, r24
  76:	01 f0       	breq	.+0      	; 0x78 <xQueueGenericReceive+0x78>
  78:	c8 01       	movw	r24, r16
  7a:	41 96       	adiw	r24, 0x11	; 17
  7c:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericReceive>
  80:	81 11       	cpse	r24, r1
  82:	00 c0       	rjmp	.+0      	; 0x84 <xQueueGenericReceive+0x84>
  84:	0f 90       	pop	r0
  86:	0f be       	out	0x3f, r0	; 63
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	00 c0       	rjmp	.+0      	; 0x8c <xQueueGenericReceive+0x8c>
  8c:	2c 81       	ldd	r18, Y+4	; 0x04
  8e:	3d 81       	ldd	r19, Y+5	; 0x05
  90:	23 2b       	or	r18, r19
  92:	01 f4       	brne	.+0      	; 0x94 <xQueueGenericReceive+0x94>
  94:	0f 90       	pop	r0
  96:	0f be       	out	0x3f, r0	; 63
  98:	00 c0       	rjmp	.+0      	; 0x9a <xQueueGenericReceive+0x9a>
  9a:	81 11       	cpse	r24, r1
  9c:	00 c0       	rjmp	.+0      	; 0x9e <xQueueGenericReceive+0x9e>
  9e:	ce 01       	movw	r24, r28
  a0:	01 96       	adiw	r24, 0x01	; 1
  a2:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericReceive>
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericReceive>
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
  b2:	0f 92       	push	r0
  b4:	f8 01       	movw	r30, r16
  b6:	85 8d       	ldd	r24, Z+29	; 0x1d
  b8:	8f 3f       	cpi	r24, 0xFF	; 255
  ba:	01 f4       	brne	.+0      	; 0xbc <xQueueGenericReceive+0xbc>
  bc:	15 8e       	std	Z+29, r1	; 0x1d
  be:	f8 01       	movw	r30, r16
  c0:	86 8d       	ldd	r24, Z+30	; 0x1e
  c2:	8f 3f       	cpi	r24, 0xFF	; 255
  c4:	01 f4       	brne	.+0      	; 0xc6 <xQueueGenericReceive+0xc6>
  c6:	16 8e       	std	Z+30, r1	; 0x1e
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	be 01       	movw	r22, r28
  ce:	6c 5f       	subi	r22, 0xFC	; 252
  d0:	7f 4f       	sbci	r23, 0xFF	; 255
  d2:	ce 01       	movw	r24, r28
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericReceive>
  da:	81 11       	cpse	r24, r1
  dc:	00 c0       	rjmp	.+0      	; 0xde <xQueueGenericReceive+0xde>
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	f8 94       	cli
  e2:	0f 92       	push	r0
  e4:	f8 01       	movw	r30, r16
  e6:	82 8d       	ldd	r24, Z+26	; 0x1a
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	81 11       	cpse	r24, r1
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <xQueueGenericReceive+0xf0>
  f0:	6c 81       	ldd	r22, Y+4	; 0x04
  f2:	7d 81       	ldd	r23, Y+5	; 0x05
  f4:	c5 01       	movw	r24, r10
  f6:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericReceive>
  fa:	c8 01       	movw	r24, r16
  fc:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericReceive>
 100:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericReceive>
 104:	88 23       	and	r24, r24
 106:	01 f0       	breq	.+0      	; 0x108 <xQueueGenericReceive+0x108>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	00 c0       	rjmp	.+0      	; 0x10c <xQueueGenericReceive+0x10c>
 10c:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericReceive>
 110:	00 c0       	rjmp	.+0      	; 0x112 <xQueueGenericReceive+0x112>
 112:	c8 01       	movw	r24, r16
 114:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericReceive>
 118:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericReceive>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <xQueueGenericReceive+0x11e>
 11e:	c8 01       	movw	r24, r16
 120:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericReceive>
 124:	0e 94 00 00 	call	0	; 0x0 <xQueueGenericReceive>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	ff 90       	pop	r15
 13e:	ef 90       	pop	r14
 140:	df 90       	pop	r13
 142:	bf 90       	pop	r11
 144:	af 90       	pop	r10
 146:	08 95       	ret

Disassembly of section .text.xQueueReceiveFromISR:

00000000 <xQueueReceiveFromISR>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	fc 01       	movw	r30, r24
   a:	22 8d       	ldd	r18, Z+26	; 0x1a
   c:	22 23       	and	r18, r18
   e:	01 f0       	breq	.+0      	; 0x10 <xQueueReceiveFromISR+0x10>
  10:	8a 01       	movw	r16, r20
  12:	ec 01       	movw	r28, r24
  14:	0e 94 00 00 	call	0	; 0x0 <xQueueReceiveFromISR>
  18:	8a 8d       	ldd	r24, Y+26	; 0x1a
  1a:	81 50       	subi	r24, 0x01	; 1
  1c:	8a 8f       	std	Y+26, r24	; 0x1a
  1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
  20:	8f 3f       	cpi	r24, 0xFF	; 255
  22:	01 f4       	brne	.+0      	; 0x24 <xQueueReceiveFromISR+0x24>
  24:	88 85       	ldd	r24, Y+8	; 0x08
  26:	88 23       	and	r24, r24
  28:	01 f0       	breq	.+0      	; 0x2a <xQueueReceiveFromISR+0x2a>
  2a:	ce 01       	movw	r24, r28
  2c:	08 96       	adiw	r24, 0x08	; 8
  2e:	0e 94 00 00 	call	0	; 0x0 <xQueueReceiveFromISR>
  32:	88 23       	and	r24, r24
  34:	01 f0       	breq	.+0      	; 0x36 <xQueueReceiveFromISR+0x36>
  36:	01 15       	cp	r16, r1
  38:	11 05       	cpc	r17, r1
  3a:	01 f0       	breq	.+0      	; 0x3c <xQueueReceiveFromISR+0x3c>
  3c:	81 e0       	ldi	r24, 0x01	; 1
  3e:	f8 01       	movw	r30, r16
  40:	80 83       	st	Z, r24
  42:	00 c0       	rjmp	.+0      	; 0x44 <xQueueReceiveFromISR+0x44>
  44:	8d 8d       	ldd	r24, Y+29	; 0x1d
  46:	8f 5f       	subi	r24, 0xFF	; 255
  48:	8d 8f       	std	Y+29, r24	; 0x1d
  4a:	81 e0       	ldi	r24, 0x01	; 1
  4c:	00 c0       	rjmp	.+0      	; 0x4e <xQueueReceiveFromISR+0x4e>
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	08 95       	ret

Disassembly of section .text.xQueuePeekFromISR:

00000000 <xQueuePeekFromISR>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	fc 01       	movw	r30, r24
   a:	22 8d       	ldd	r18, Z+26	; 0x1a
   c:	22 23       	and	r18, r18
   e:	01 f0       	breq	.+0      	; 0x10 <xQueuePeekFromISR+0x10>
  10:	ec 01       	movw	r28, r24
  12:	06 81       	ldd	r16, Z+6	; 0x06
  14:	17 81       	ldd	r17, Z+7	; 0x07
  16:	0e 94 00 00 	call	0	; 0x0 <xQueuePeekFromISR>
  1a:	1f 83       	std	Y+7, r17	; 0x07
  1c:	0e 83       	std	Y+6, r16	; 0x06
  1e:	81 e0       	ldi	r24, 0x01	; 1
  20:	00 c0       	rjmp	.+0      	; 0x22 <xQueuePeekFromISR+0x22>
  22:	80 e0       	ldi	r24, 0x00	; 0
  24:	df 91       	pop	r29
  26:	cf 91       	pop	r28
  28:	1f 91       	pop	r17
  2a:	0f 91       	pop	r16
  2c:	08 95       	ret

Disassembly of section .text.uxQueueMessagesWaiting:

00000000 <uxQueueMessagesWaiting>:
   0:	0f b6       	in	r0, 0x3f	; 63
   2:	f8 94       	cli
   4:	0f 92       	push	r0
   6:	fc 01       	movw	r30, r24
   8:	82 8d       	ldd	r24, Z+26	; 0x1a
   a:	0f 90       	pop	r0
   c:	0f be       	out	0x3f, r0	; 63
   e:	08 95       	ret

Disassembly of section .text.uxQueueSpacesAvailable:

00000000 <uxQueueSpacesAvailable>:
   0:	0f b6       	in	r0, 0x3f	; 63
   2:	f8 94       	cli
   4:	0f 92       	push	r0
   6:	fc 01       	movw	r30, r24
   8:	22 8d       	ldd	r18, Z+26	; 0x1a
   a:	0f 90       	pop	r0
   c:	0f be       	out	0x3f, r0	; 63
   e:	83 8d       	ldd	r24, Z+27	; 0x1b
  10:	82 1b       	sub	r24, r18
  12:	08 95       	ret

Disassembly of section .text.uxQueueMessagesWaitingFromISR:

00000000 <uxQueueMessagesWaitingFromISR>:
   0:	fc 01       	movw	r30, r24
   2:	82 8d       	ldd	r24, Z+26	; 0x1a
   4:	08 95       	ret

Disassembly of section .text.vQueueDelete:

00000000 <vQueueDelete>:
   0:	0c 94 00 00 	jmp	0	; 0x0 <vQueueDelete>

Disassembly of section .text.xQueueIsQueueEmptyFromISR:

00000000 <xQueueIsQueueEmptyFromISR>:
   0:	fc 01       	movw	r30, r24
   2:	92 8d       	ldd	r25, Z+26	; 0x1a
   4:	81 e0       	ldi	r24, 0x01	; 1
   6:	91 11       	cpse	r25, r1
   8:	80 e0       	ldi	r24, 0x00	; 0
   a:	08 95       	ret

Disassembly of section .text.xQueueIsQueueFullFromISR:

00000000 <xQueueIsQueueFullFromISR>:
   0:	fc 01       	movw	r30, r24
   2:	92 8d       	ldd	r25, Z+26	; 0x1a
   4:	81 e0       	ldi	r24, 0x01	; 1
   6:	23 8d       	ldd	r18, Z+27	; 0x1b
   8:	29 13       	cpse	r18, r25
   a:	80 e0       	ldi	r24, 0x00	; 0
   c:	08 95       	ret

Disassembly of section .text.xQueueCRSend:

00000000 <xQueueCRSend>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	f8 94       	cli
   8:	0f b6       	in	r0, 0x3f	; 63
   a:	f8 94       	cli
   c:	0f 92       	push	r0
   e:	8a 8d       	ldd	r24, Y+26	; 0x1a
  10:	9b 8d       	ldd	r25, Y+27	; 0x1b
  12:	0f 90       	pop	r0
  14:	0f be       	out	0x3f, r0	; 63
  16:	89 13       	cpse	r24, r25
  18:	00 c0       	rjmp	.+0      	; 0x1a <xQueueCRSend+0x1a>
  1a:	41 15       	cp	r20, r1
  1c:	51 05       	cpc	r21, r1
  1e:	01 f0       	breq	.+0      	; 0x20 <xQueueCRSend+0x20>
  20:	be 01       	movw	r22, r28
  22:	68 5f       	subi	r22, 0xF8	; 248
  24:	7f 4f       	sbci	r23, 0xFF	; 255
  26:	ca 01       	movw	r24, r20
  28:	0e 94 00 00 	call	0	; 0x0 <xQueueCRSend>
  2c:	78 94       	sei
  2e:	8c ef       	ldi	r24, 0xFC	; 252
  30:	00 c0       	rjmp	.+0      	; 0x32 <xQueueCRSend+0x32>
  32:	78 94       	sei
  34:	80 e0       	ldi	r24, 0x00	; 0
  36:	00 c0       	rjmp	.+0      	; 0x38 <xQueueCRSend+0x38>
  38:	78 94       	sei
  3a:	f8 94       	cli
  3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
  3e:	89 17       	cp	r24, r25
  40:	00 f4       	brcc	.+0      	; 0x42 <xQueueCRSend+0x42>
  42:	40 e0       	ldi	r20, 0x00	; 0
  44:	ce 01       	movw	r24, r28
  46:	0e 94 00 00 	call	0	; 0x0 <xQueueCRSend>
  4a:	89 89       	ldd	r24, Y+17	; 0x11
  4c:	81 11       	cpse	r24, r1
  4e:	00 c0       	rjmp	.+0      	; 0x50 <xQueueCRSend+0x50>
  50:	81 e0       	ldi	r24, 0x01	; 1
  52:	00 c0       	rjmp	.+0      	; 0x54 <xQueueCRSend+0x54>
  54:	ce 01       	movw	r24, r28
  56:	41 96       	adiw	r24, 0x11	; 17
  58:	0e 94 00 00 	call	0	; 0x0 <xQueueCRSend>
  5c:	88 23       	and	r24, r24
  5e:	01 f0       	breq	.+0      	; 0x60 <xQueueCRSend+0x60>
  60:	8b ef       	ldi	r24, 0xFB	; 251
  62:	00 c0       	rjmp	.+0      	; 0x64 <xQueueCRSend+0x64>
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	78 94       	sei
  68:	df 91       	pop	r29
  6a:	cf 91       	pop	r28
  6c:	08 95       	ret

Disassembly of section .text.xQueueCRReceive:

00000000 <xQueueCRReceive>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	fb 01       	movw	r30, r22
   8:	f8 94       	cli
   a:	8a 8d       	ldd	r24, Y+26	; 0x1a
   c:	81 11       	cpse	r24, r1
   e:	00 c0       	rjmp	.+0      	; 0x10 <xQueueCRReceive+0x10>
  10:	41 15       	cp	r20, r1
  12:	51 05       	cpc	r21, r1
  14:	01 f0       	breq	.+0      	; 0x16 <xQueueCRReceive+0x16>
  16:	be 01       	movw	r22, r28
  18:	6f 5e       	subi	r22, 0xEF	; 239
  1a:	7f 4f       	sbci	r23, 0xFF	; 255
  1c:	ca 01       	movw	r24, r20
  1e:	0e 94 00 00 	call	0	; 0x0 <xQueueCRReceive>
  22:	78 94       	sei
  24:	8c ef       	ldi	r24, 0xFC	; 252
  26:	00 c0       	rjmp	.+0      	; 0x28 <xQueueCRReceive+0x28>
  28:	78 94       	sei
  2a:	80 e0       	ldi	r24, 0x00	; 0
  2c:	00 c0       	rjmp	.+0      	; 0x2e <xQueueCRReceive+0x2e>
  2e:	78 94       	sei
  30:	f8 94       	cli
  32:	8a 8d       	ldd	r24, Y+26	; 0x1a
  34:	88 23       	and	r24, r24
  36:	01 f0       	breq	.+0      	; 0x38 <xQueueCRReceive+0x38>
  38:	4c 8d       	ldd	r20, Y+28	; 0x1c
  3a:	50 e0       	ldi	r21, 0x00	; 0
  3c:	2e 81       	ldd	r18, Y+6	; 0x06
  3e:	3f 81       	ldd	r19, Y+7	; 0x07
  40:	24 0f       	add	r18, r20
  42:	35 1f       	adc	r19, r21
  44:	3f 83       	std	Y+7, r19	; 0x07
  46:	2e 83       	std	Y+6, r18	; 0x06
  48:	8a 81       	ldd	r24, Y+2	; 0x02
  4a:	9b 81       	ldd	r25, Y+3	; 0x03
  4c:	28 17       	cp	r18, r24
  4e:	39 07       	cpc	r19, r25
  50:	00 f0       	brcs	.+0      	; 0x52 <xQueueCRReceive+0x52>
  52:	88 81       	ld	r24, Y
  54:	99 81       	ldd	r25, Y+1	; 0x01
  56:	9f 83       	std	Y+7, r25	; 0x07
  58:	8e 83       	std	Y+6, r24	; 0x06
  5a:	9a 8d       	ldd	r25, Y+26	; 0x1a
  5c:	91 50       	subi	r25, 0x01	; 1
  5e:	9a 8f       	std	Y+26, r25	; 0x1a
  60:	6e 81       	ldd	r22, Y+6	; 0x06
  62:	7f 81       	ldd	r23, Y+7	; 0x07
  64:	cf 01       	movw	r24, r30
  66:	0e 94 00 00 	call	0	; 0x0 <xQueueCRReceive>
  6a:	88 85       	ldd	r24, Y+8	; 0x08
  6c:	81 11       	cpse	r24, r1
  6e:	00 c0       	rjmp	.+0      	; 0x70 <xQueueCRReceive+0x70>
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	00 c0       	rjmp	.+0      	; 0x74 <xQueueCRReceive+0x74>
  74:	ce 01       	movw	r24, r28
  76:	08 96       	adiw	r24, 0x08	; 8
  78:	0e 94 00 00 	call	0	; 0x0 <xQueueCRReceive>
  7c:	88 23       	and	r24, r24
  7e:	01 f0       	breq	.+0      	; 0x80 <xQueueCRReceive+0x80>
  80:	8b ef       	ldi	r24, 0xFB	; 251
  82:	00 c0       	rjmp	.+0      	; 0x84 <xQueueCRReceive+0x84>
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	78 94       	sei
  88:	df 91       	pop	r29
  8a:	cf 91       	pop	r28
  8c:	08 95       	ret

Disassembly of section .text.xQueueCRSendFromISR:

00000000 <xQueueCRSendFromISR>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	8c 01       	movw	r16, r24
   8:	c4 2f       	mov	r28, r20
   a:	fc 01       	movw	r30, r24
   c:	92 8d       	ldd	r25, Z+26	; 0x1a
   e:	83 8d       	ldd	r24, Z+27	; 0x1b
  10:	98 17       	cp	r25, r24
  12:	00 f0       	brcs	.+0      	; 0x14 <xQueueCRSendFromISR+0x14>
  14:	4c 2f       	mov	r20, r28
  16:	00 c0       	rjmp	.+0      	; 0x18 <xQueueCRSendFromISR+0x18>
  18:	40 e0       	ldi	r20, 0x00	; 0
  1a:	c8 01       	movw	r24, r16
  1c:	0e 94 00 00 	call	0	; 0x0 <xQueueCRSendFromISR>
  20:	c1 11       	cpse	r28, r1
  22:	00 c0       	rjmp	.+0      	; 0x24 <xQueueCRSendFromISR+0x24>
  24:	f8 01       	movw	r30, r16
  26:	81 89       	ldd	r24, Z+17	; 0x11
  28:	88 23       	and	r24, r24
  2a:	01 f0       	breq	.+0      	; 0x2c <xQueueCRSendFromISR+0x2c>
  2c:	c8 01       	movw	r24, r16
  2e:	41 96       	adiw	r24, 0x11	; 17
  30:	0e 94 00 00 	call	0	; 0x0 <xQueueCRSendFromISR>
  34:	41 e0       	ldi	r20, 0x01	; 1
  36:	81 11       	cpse	r24, r1
  38:	00 c0       	rjmp	.+0      	; 0x3a <xQueueCRSendFromISR+0x3a>
  3a:	40 e0       	ldi	r20, 0x00	; 0
  3c:	84 2f       	mov	r24, r20
  3e:	cf 91       	pop	r28
  40:	1f 91       	pop	r17
  42:	0f 91       	pop	r16
  44:	08 95       	ret

Disassembly of section .text.xQueueCRReceiveFromISR:

00000000 <xQueueCRReceiveFromISR>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	fc 01       	movw	r30, r24
   a:	82 8d       	ldd	r24, Z+26	; 0x1a
   c:	88 23       	and	r24, r24
   e:	01 f0       	breq	.+0      	; 0x10 <xQueueCRReceiveFromISR+0x10>
  10:	24 8d       	ldd	r18, Z+28	; 0x1c
  12:	30 e0       	ldi	r19, 0x00	; 0
  14:	a6 81       	ldd	r26, Z+6	; 0x06
  16:	b7 81       	ldd	r27, Z+7	; 0x07
  18:	a2 0f       	add	r26, r18
  1a:	b3 1f       	adc	r27, r19
  1c:	b7 83       	std	Z+7, r27	; 0x07
  1e:	a6 83       	std	Z+6, r26	; 0x06
  20:	82 81       	ldd	r24, Z+2	; 0x02
  22:	93 81       	ldd	r25, Z+3	; 0x03
  24:	a8 17       	cp	r26, r24
  26:	b9 07       	cpc	r27, r25
  28:	00 f0       	brcs	.+0      	; 0x2a <xQueueCRReceiveFromISR+0x2a>
  2a:	80 81       	ld	r24, Z
  2c:	91 81       	ldd	r25, Z+1	; 0x01
  2e:	97 83       	std	Z+7, r25	; 0x07
  30:	86 83       	std	Z+6, r24	; 0x06
  32:	8a 01       	movw	r16, r20
  34:	cb 01       	movw	r24, r22
  36:	ef 01       	movw	r28, r30
  38:	42 8d       	ldd	r20, Z+26	; 0x1a
  3a:	41 50       	subi	r20, 0x01	; 1
  3c:	42 8f       	std	Z+26, r20	; 0x1a
  3e:	66 81       	ldd	r22, Z+6	; 0x06
  40:	77 81       	ldd	r23, Z+7	; 0x07
  42:	a9 01       	movw	r20, r18
  44:	0e 94 00 00 	call	0	; 0x0 <xQueueCRReceiveFromISR>
  48:	f8 01       	movw	r30, r16
  4a:	80 81       	ld	r24, Z
  4c:	88 23       	and	r24, r24
  4e:	01 f0       	breq	.+0      	; 0x50 <xQueueCRReceiveFromISR+0x50>
  50:	81 e0       	ldi	r24, 0x01	; 1
  52:	00 c0       	rjmp	.+0      	; 0x54 <xQueueCRReceiveFromISR+0x54>
  54:	88 85       	ldd	r24, Y+8	; 0x08
  56:	88 23       	and	r24, r24
  58:	01 f0       	breq	.+0      	; 0x5a <xQueueCRReceiveFromISR+0x5a>
  5a:	ce 01       	movw	r24, r28
  5c:	08 96       	adiw	r24, 0x08	; 8
  5e:	0e 94 00 00 	call	0	; 0x0 <xQueueCRReceiveFromISR>
  62:	88 23       	and	r24, r24
  64:	01 f0       	breq	.+0      	; 0x66 <xQueueCRReceiveFromISR+0x66>
  66:	81 e0       	ldi	r24, 0x01	; 1
  68:	f8 01       	movw	r30, r16
  6a:	80 83       	st	Z, r24
  6c:	00 c0       	rjmp	.+0      	; 0x6e <xQueueCRReceiveFromISR+0x6e>
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	df 91       	pop	r29
  72:	cf 91       	pop	r28
  74:	1f 91       	pop	r17
  76:	0f 91       	pop	r16
  78:	08 95       	ret

tasks.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .text.prvResetNextTaskUnblockTime 00000036  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  4 .text.prvAddCurrentTaskToDelayedList 00000070  00000000  00000000  0000006a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  5 .text.xTaskGenericCreate 000001f4  00000000  00000000  000000da  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.vTaskDelete 0000008e  00000000  00000000  000002ce  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .rodata.str1.1 00000005  00000000  00000000  0000035c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .text.vTaskStartScheduler 00000064  00000000  00000000  00000361  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.vTaskEndScheduler 0000000a  00000000  00000000  000003c5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.vTaskSuspendAll 0000000c  00000000  00000000  000003cf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.xTaskGetTickCount 00000014  00000000  00000000  000003db  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.xTaskGetTickCountFromISR 0000000a  00000000  00000000  000003ef  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.uxTaskGetNumberOfTasks 00000006  00000000  00000000  000003f9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text.xTaskIncrementTick 0000015e  00000000  00000000  000003ff  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text.xTaskResumeAll 000000e0  00000000  00000000  0000055d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text.vTaskDelayUntil 00000078  00000000  00000000  0000063d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text.vTaskDelay 00000042  00000000  00000000  000006b5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text.prvIdleTask 00000068  00000000  00000000  000006f7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text.vTaskSwitchContext 00000098  00000000  00000000  0000075f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text.vTaskPlaceOnEventList 00000038  00000000  00000000  000007f7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text.vTaskPlaceOnUnorderedEventList 00000046  00000000  00000000  0000082f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text.xTaskRemoveFromEventList 00000080  00000000  00000000  00000875  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text.xTaskRemoveFromUnorderedEventList 00000068  00000000  00000000  000008f5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text.vTaskSetTimeOutState 00000016  00000000  00000000  0000095d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text.xTaskCheckForTimeOut 00000058  00000000  00000000  00000973  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text.vTaskMissedYield 00000008  00000000  00000000  000009cb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text.uxTaskResetEventItemValue 0000002e  00000000  00000000  000009d3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text.ulTaskNotifyTake 000000c6  00000000  00000000  00000a01  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text.xTaskNotifyWait 00000126  00000000  00000000  00000ac7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text.xTaskGenericNotify 000000d2  00000000  00000000  00000bed  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text.xTaskNotifyFromISR 000000d8  00000000  00000000  00000cbf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text.vTaskNotifyGiveFromISR 0000009e  00000000  00000000  00000d97  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .bss.uxSchedulerSuspended 00000001  00000000  00000000  00000e35  2**0
                  ALLOC
 34 .data.xNextTaskUnblockTime 00000002  00000000  00000000  00000e35  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 35 .bss.uxTaskNumber 00000001  00000000  00000000  00000e37  2**0
                  ALLOC
 36 .bss.xNumOfOverflows 00000001  00000000  00000000  00000e37  2**0
                  ALLOC
 37 .bss.xYieldPending 00000001  00000000  00000000  00000e37  2**0
                  ALLOC
 38 .bss.uxPendedTicks 00000001  00000000  00000000  00000e37  2**0
                  ALLOC
 39 .bss.xSchedulerRunning 00000001  00000000  00000000  00000e37  2**0
                  ALLOC
 40 .bss.uxTopReadyPriority 00000001  00000000  00000000  00000e37  2**0
                  ALLOC
 41 .bss.xTickCount 00000002  00000000  00000000  00000e37  2**0
                  ALLOC
 42 .bss.uxCurrentNumberOfTasks 00000001  00000000  00000000  00000e37  2**0
                  ALLOC
 43 .bss.uxTasksDeleted 00000001  00000000  00000000  00000e37  2**0
                  ALLOC
 44 .bss.xTasksWaitingTermination 00000009  00000000  00000000  00000e37  2**0
                  ALLOC
 45 .bss.xPendingReadyList 00000009  00000000  00000000  00000e37  2**0
                  ALLOC
 46 .bss.pxOverflowDelayedTaskList 00000002  00000000  00000000  00000e37  2**0
                  ALLOC
 47 .bss.pxDelayedTaskList 00000002  00000000  00000000  00000e37  2**0
                  ALLOC
 48 .bss.xDelayedTaskList2 00000009  00000000  00000000  00000e37  2**0
                  ALLOC
 49 .bss.xDelayedTaskList1 00000009  00000000  00000000  00000e37  2**0
                  ALLOC
 50 .bss.pxReadyTasksLists 00000024  00000000  00000000  00000e37  2**0
                  ALLOC
 51 .bss.pxCurrentTCB 00000002  00000000  00000000  00000e37  2**0
                  ALLOC
 52 .comment      00000012  00000000  00000000  00000e37  2**0
                  CONTENTS, READONLY

Disassembly of section .text.prvResetNextTaskUnblockTime:

00000000 <prvResetNextTaskUnblockTime>:
   0:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   4:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   8:	80 81       	ld	r24, Z
   a:	81 11       	cpse	r24, r1
   c:	00 c0       	rjmp	.+0      	; 0xe <prvResetNextTaskUnblockTime+0xe>
   e:	8f ef       	ldi	r24, 0xFF	; 255
  10:	9f ef       	ldi	r25, 0xFF	; 255
  12:	00 c0       	rjmp	.+0      	; 0x14 <prvResetNextTaskUnblockTime+0x14>
  14:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  18:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  1c:	05 80       	ldd	r0, Z+5	; 0x05
  1e:	f6 81       	ldd	r31, Z+6	; 0x06
  20:	e0 2d       	mov	r30, r0
  22:	06 80       	ldd	r0, Z+6	; 0x06
  24:	f7 81       	ldd	r31, Z+7	; 0x07
  26:	e0 2d       	mov	r30, r0
  28:	82 81       	ldd	r24, Z+2	; 0x02
  2a:	93 81       	ldd	r25, Z+3	; 0x03
  2c:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
  30:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  34:	08 95       	ret

Disassembly of section .text.prvAddCurrentTaskToDelayedList:

00000000 <prvAddCurrentTaskToDelayedList>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   8:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   c:	93 83       	std	Z+3, r25	; 0x03
   e:	82 83       	std	Z+2, r24	; 0x02
  10:	20 91 00 00 	lds	r18, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  14:	30 91 00 00 	lds	r19, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  18:	82 17       	cp	r24, r18
  1a:	93 07       	cpc	r25, r19
  1c:	00 f4       	brcc	.+0      	; 0x1e <prvAddCurrentTaskToDelayedList+0x1e>
  1e:	60 91 00 00 	lds	r22, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  22:	70 91 00 00 	lds	r23, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  26:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  2a:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  2e:	6e 5f       	subi	r22, 0xFE	; 254
  30:	7f 4f       	sbci	r23, 0xFF	; 255
  32:	df 91       	pop	r29
  34:	cf 91       	pop	r28
  36:	0c 94 00 00 	jmp	0	; 0x0 <prvAddCurrentTaskToDelayedList>
  3a:	ec 01       	movw	r28, r24
  3c:	60 91 00 00 	lds	r22, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  40:	70 91 00 00 	lds	r23, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  44:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  48:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  4c:	6e 5f       	subi	r22, 0xFE	; 254
  4e:	7f 4f       	sbci	r23, 0xFF	; 255
  50:	0e 94 00 00 	call	0	; 0x0 <prvAddCurrentTaskToDelayedList>
  54:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  58:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  5c:	c8 17       	cp	r28, r24
  5e:	d9 07       	cpc	r29, r25
  60:	00 f4       	brcc	.+0      	; 0x62 <prvAddCurrentTaskToDelayedList+0x62>
  62:	d0 93 00 00 	sts	0x0000, r29	; 0x800000 <__SREG__+0x7fffc1>
  66:	c0 93 00 00 	sts	0x0000, r28	; 0x800000 <__SREG__+0x7fffc1>
  6a:	df 91       	pop	r29
  6c:	cf 91       	pop	r28
  6e:	08 95       	ret

Disassembly of section .text.xTaskGenericCreate:

00000000 <xTaskGenericCreate>:
   0:	5f 92       	push	r5
   2:	6f 92       	push	r6
   4:	7f 92       	push	r7
   6:	8f 92       	push	r8
   8:	9f 92       	push	r9
   a:	af 92       	push	r10
   c:	bf 92       	push	r11
   e:	cf 92       	push	r12
  10:	df 92       	push	r13
  12:	ef 92       	push	r14
  14:	ff 92       	push	r15
  16:	0f 93       	push	r16
  18:	1f 93       	push	r17
  1a:	cf 93       	push	r28
  1c:	df 93       	push	r29
  1e:	4c 01       	movw	r8, r24
  20:	16 2f       	mov	r17, r22
  22:	57 2e       	mov	r5, r23
  24:	5a 01       	movw	r10, r20
  26:	39 01       	movw	r6, r18
  28:	c1 14       	cp	r12, r1
  2a:	d1 04       	cpc	r13, r1
  2c:	01 f4       	brne	.+0      	; 0x2e <xTaskGenericCreate+0x2e>
  2e:	ca 01       	movw	r24, r20
  30:	0e 94 00 00 	call	0	; 0x0 <xTaskGenericCreate>
  34:	6c 01       	movw	r12, r24
  36:	89 2b       	or	r24, r25
  38:	01 f4       	brne	.+0      	; 0x3a <xTaskGenericCreate+0x3a>
  3a:	00 c0       	rjmp	.+0      	; 0x3c <xTaskGenericCreate+0x3c>
  3c:	86 e2       	ldi	r24, 0x26	; 38
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	0e 94 00 00 	call	0	; 0x0 <xTaskGenericCreate>
  44:	ec 01       	movw	r28, r24
  46:	00 97       	sbiw	r24, 0x00	; 0
  48:	01 f0       	breq	.+0      	; 0x4a <xTaskGenericCreate+0x4a>
  4a:	d8 8e       	std	Y+24, r13	; 0x18
  4c:	cf 8a       	std	Y+23, r12	; 0x17
  4e:	21 e0       	ldi	r18, 0x01	; 1
  50:	a2 1a       	sub	r10, r18
  52:	b1 08       	sbc	r11, r1
  54:	ca 0c       	add	r12, r10
  56:	db 1c       	adc	r13, r11
  58:	bc 01       	movw	r22, r24
  5a:	67 5e       	subi	r22, 0xE7	; 231
  5c:	7f 4f       	sbci	r23, 0xFF	; 255
  5e:	e1 2f       	mov	r30, r17
  60:	f5 2d       	mov	r31, r5
  62:	cf 01       	movw	r24, r30
  64:	08 96       	adiw	r24, 0x08	; 8
  66:	00 c0       	rjmp	.+0      	; 0x68 <xTaskGenericCreate+0x68>
  68:	c6 01       	movw	r24, r12
  6a:	0e 94 00 00 	call	0	; 0x0 <xTaskGenericCreate>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <xTaskGenericCreate+0x70>
  70:	e8 17       	cp	r30, r24
  72:	f9 07       	cpc	r31, r25
  74:	01 f0       	breq	.+0      	; 0x76 <xTaskGenericCreate+0x76>
  76:	9f 01       	movw	r18, r30
  78:	41 91       	ld	r20, Z+
  7a:	db 01       	movw	r26, r22
  7c:	4d 93       	st	X+, r20
  7e:	bd 01       	movw	r22, r26
  80:	d9 01       	movw	r26, r18
  82:	2c 91       	ld	r18, X
  84:	21 11       	cpse	r18, r1
  86:	00 c0       	rjmp	.+0      	; 0x88 <xTaskGenericCreate+0x88>
  88:	18 a2       	std	Y+32, r1	; 0x20
  8a:	10 2f       	mov	r17, r16
  8c:	04 30       	cpi	r16, 0x04	; 4
  8e:	00 f0       	brcs	.+0      	; 0x90 <xTaskGenericCreate+0x90>
  90:	13 e0       	ldi	r17, 0x03	; 3
  92:	1e 8b       	std	Y+22, r17	; 0x16
  94:	5e 01       	movw	r10, r28
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	ab 0e       	add	r10, r27
  9a:	b1 1c       	adc	r11, r1
  9c:	c5 01       	movw	r24, r10
  9e:	0e 94 00 00 	call	0	; 0x0 <xTaskGenericCreate>
  a2:	ce 01       	movw	r24, r28
  a4:	0c 96       	adiw	r24, 0x0c	; 12
  a6:	0e 94 00 00 	call	0	; 0x0 <xTaskGenericCreate>
  aa:	d9 87       	std	Y+9, r29	; 0x09
  ac:	c8 87       	std	Y+8, r28	; 0x08
  ae:	84 e0       	ldi	r24, 0x04	; 4
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	81 1b       	sub	r24, r17
  b4:	91 09       	sbc	r25, r1
  b6:	9d 87       	std	Y+13, r25	; 0x0d
  b8:	8c 87       	std	Y+12, r24	; 0x0c
  ba:	db 8b       	std	Y+19, r29	; 0x13
  bc:	ca 8b       	std	Y+18, r28	; 0x12
  be:	19 a2       	std	Y+33, r1	; 0x21
  c0:	1a a2       	std	Y+34, r1	; 0x22
  c2:	1b a2       	std	Y+35, r1	; 0x23
  c4:	1c a2       	std	Y+36, r1	; 0x24
  c6:	1d a2       	std	Y+37, r1	; 0x25
  c8:	a3 01       	movw	r20, r6
  ca:	b4 01       	movw	r22, r8
  cc:	c6 01       	movw	r24, r12
  ce:	0e 94 00 00 	call	0	; 0x0 <xTaskGenericCreate>
  d2:	99 83       	std	Y+1, r25	; 0x01
  d4:	88 83       	st	Y, r24
  d6:	e1 14       	cp	r14, r1
  d8:	f1 04       	cpc	r15, r1
  da:	01 f0       	breq	.+0      	; 0xdc <xTaskGenericCreate+0xdc>
  dc:	f7 01       	movw	r30, r14
  de:	d1 83       	std	Z+1, r29	; 0x01
  e0:	c0 83       	st	Z, r28
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	f8 94       	cli
  e6:	0f 92       	push	r0
  e8:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  f2:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  f6:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  fa:	89 2b       	or	r24, r25
  fc:	01 f4       	brne	.+0      	; 0xfe <xTaskGenericCreate+0xfe>
  fe:	d0 93 00 00 	sts	0x0000, r29	; 0x800000 <__SREG__+0x7fffc1>
 102:	c0 93 00 00 	sts	0x0000, r28	; 0x800000 <__SREG__+0x7fffc1>
 106:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	01 f4       	brne	.+0      	; 0x10e <xTaskGenericCreate+0x10e>
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 00 00 	call	0	; 0x0 <xTaskGenericCreate>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 00 00 	call	0	; 0x0 <xTaskGenericCreate>
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 00 00 	call	0	; 0x0 <xTaskGenericCreate>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 00 00 	call	0	; 0x0 <xTaskGenericCreate>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 00 00 	call	0	; 0x0 <xTaskGenericCreate>
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 00 00 	call	0	; 0x0 <xTaskGenericCreate>
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 00 00 	call	0	; 0x0 <xTaskGenericCreate>
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 00 00 	call	0	; 0x0 <xTaskGenericCreate>
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
 156:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
 162:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
 166:	00 c0       	rjmp	.+0      	; 0x168 <xTaskGenericCreate+0x168>
 168:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 16c:	81 11       	cpse	r24, r1
 16e:	00 c0       	rjmp	.+0      	; 0x170 <xTaskGenericCreate+0x170>
 170:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 174:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 178:	86 89       	ldd	r24, Z+22	; 0x16
 17a:	08 17       	cp	r16, r24
 17c:	00 f0       	brcs	.+0      	; 0x17e <xTaskGenericCreate+0x17e>
 17e:	d0 93 00 00 	sts	0x0000, r29	; 0x800000 <__SREG__+0x7fffc1>
 182:	c0 93 00 00 	sts	0x0000, r28	; 0x800000 <__SREG__+0x7fffc1>
 186:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 18a:	8f 5f       	subi	r24, 0xFF	; 255
 18c:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
 190:	8e 89       	ldd	r24, Y+22	; 0x16
 192:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 196:	98 17       	cp	r25, r24
 198:	00 f4       	brcc	.+0      	; 0x19a <xTaskGenericCreate+0x19a>
 19a:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
 19e:	f9 e0       	ldi	r31, 0x09	; 9
 1a0:	8f 9f       	mul	r24, r31
 1a2:	c0 01       	movw	r24, r0
 1a4:	11 24       	eor	r1, r1
 1a6:	b5 01       	movw	r22, r10
 1a8:	80 50       	subi	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	0e 94 00 00 	call	0	; 0x0 <xTaskGenericCreate>
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 1b8:	88 23       	and	r24, r24
 1ba:	01 f0       	breq	.+0      	; 0x1bc <xTaskGenericCreate+0x1bc>
 1bc:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 1c0:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 1c4:	86 89       	ldd	r24, Z+22	; 0x16
 1c6:	80 17       	cp	r24, r16
 1c8:	00 f4       	brcc	.+0      	; 0x1ca <xTaskGenericCreate+0x1ca>
 1ca:	0e 94 00 00 	call	0	; 0x0 <xTaskGenericCreate>
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <xTaskGenericCreate+0x1d2>
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	df 90       	pop	r13
 1e2:	cf 90       	pop	r12
 1e4:	bf 90       	pop	r11
 1e6:	af 90       	pop	r10
 1e8:	9f 90       	pop	r9
 1ea:	8f 90       	pop	r8
 1ec:	7f 90       	pop	r7
 1ee:	6f 90       	pop	r6
 1f0:	5f 90       	pop	r5
 1f2:	08 95       	ret

Disassembly of section .text.vTaskDelete:

00000000 <vTaskDelete>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	0f 92       	push	r0
  10:	89 2b       	or	r24, r25
  12:	01 f4       	brne	.+0      	; 0x14 <vTaskDelete+0x14>
  14:	c0 91 00 00 	lds	r28, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  18:	d0 91 00 00 	lds	r29, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  1c:	8e 01       	movw	r16, r28
  1e:	0e 5f       	subi	r16, 0xFE	; 254
  20:	1f 4f       	sbci	r17, 0xFF	; 255
  22:	c8 01       	movw	r24, r16
  24:	0e 94 00 00 	call	0	; 0x0 <vTaskDelete>
  28:	8c 89       	ldd	r24, Y+20	; 0x14
  2a:	9d 89       	ldd	r25, Y+21	; 0x15
  2c:	89 2b       	or	r24, r25
  2e:	01 f0       	breq	.+0      	; 0x30 <vTaskDelete+0x30>
  30:	ce 01       	movw	r24, r28
  32:	0c 96       	adiw	r24, 0x0c	; 12
  34:	0e 94 00 00 	call	0	; 0x0 <vTaskDelete>
  38:	b8 01       	movw	r22, r16
  3a:	80 e0       	ldi	r24, 0x00	; 0
  3c:	90 e0       	ldi	r25, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <vTaskDelete>
  42:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  46:	8f 5f       	subi	r24, 0xFF	; 255
  48:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  4c:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  50:	8f 5f       	subi	r24, 0xFF	; 255
  52:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  56:	0f 90       	pop	r0
  58:	0f be       	out	0x3f, r0	; 63
  5a:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  5e:	88 23       	and	r24, r24
  60:	01 f0       	breq	.+0      	; 0x62 <vTaskDelete+0x62>
  62:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  66:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  6a:	c8 17       	cp	r28, r24
  6c:	d9 07       	cpc	r29, r25
  6e:	01 f4       	brne	.+0      	; 0x70 <vTaskDelete+0x70>
  70:	0e 94 00 00 	call	0	; 0x0 <vTaskDelete>
  74:	00 c0       	rjmp	.+0      	; 0x76 <vTaskDelete+0x76>
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	0f 92       	push	r0
  7c:	0e 94 00 00 	call	0	; 0x0 <vTaskDelete>
  80:	0f 90       	pop	r0
  82:	0f be       	out	0x3f, r0	; 63
  84:	df 91       	pop	r29
  86:	cf 91       	pop	r28
  88:	1f 91       	pop	r17
  8a:	0f 91       	pop	r16
  8c:	08 95       	ret

Disassembly of section .text.vTaskStartScheduler:

00000000 <vTaskStartScheduler>:
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	a1 2c       	mov	r10, r1
  10:	b1 2c       	mov	r11, r1
  12:	c1 2c       	mov	r12, r1
  14:	d1 2c       	mov	r13, r1
  16:	e1 2c       	mov	r14, r1
  18:	f1 2c       	mov	r15, r1
  1a:	00 e0       	ldi	r16, 0x00	; 0
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	30 e0       	ldi	r19, 0x00	; 0
  20:	45 e5       	ldi	r20, 0x55	; 85
  22:	50 e0       	ldi	r21, 0x00	; 0
  24:	60 e0       	ldi	r22, 0x00	; 0
  26:	70 e0       	ldi	r23, 0x00	; 0
  28:	80 e0       	ldi	r24, 0x00	; 0
  2a:	90 e0       	ldi	r25, 0x00	; 0
  2c:	0e 94 00 00 	call	0	; 0x0 <vTaskStartScheduler>
  30:	81 30       	cpi	r24, 0x01	; 1
  32:	01 f4       	brne	.+0      	; 0x34 <vTaskStartScheduler+0x34>
  34:	f8 94       	cli
  36:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  3a:	10 92 00 00 	sts	0x0000, r1	; 0x800000 <__SREG__+0x7fffc1>
  3e:	10 92 00 00 	sts	0x0000, r1	; 0x800000 <__SREG__+0x7fffc1>
  42:	0f 91       	pop	r16
  44:	ff 90       	pop	r15
  46:	ef 90       	pop	r14
  48:	df 90       	pop	r13
  4a:	cf 90       	pop	r12
  4c:	bf 90       	pop	r11
  4e:	af 90       	pop	r10
  50:	0c 94 00 00 	jmp	0	; 0x0 <vTaskStartScheduler>
  54:	0f 91       	pop	r16
  56:	ff 90       	pop	r15
  58:	ef 90       	pop	r14
  5a:	df 90       	pop	r13
  5c:	cf 90       	pop	r12
  5e:	bf 90       	pop	r11
  60:	af 90       	pop	r10
  62:	08 95       	ret

Disassembly of section .text.vTaskEndScheduler:

00000000 <vTaskEndScheduler>:
   0:	f8 94       	cli
   2:	10 92 00 00 	sts	0x0000, r1	; 0x800000 <__SREG__+0x7fffc1>
   6:	0c 94 00 00 	jmp	0	; 0x0 <vTaskEndScheduler>

Disassembly of section .text.vTaskSuspendAll:

00000000 <vTaskSuspendAll>:
   0:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   4:	8f 5f       	subi	r24, 0xFF	; 255
   6:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
   a:	08 95       	ret

Disassembly of section .text.xTaskGetTickCount:

00000000 <xTaskGetTickCount>:
   0:	0f b6       	in	r0, 0x3f	; 63
   2:	f8 94       	cli
   4:	0f 92       	push	r0
   6:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   a:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   e:	0f 90       	pop	r0
  10:	0f be       	out	0x3f, r0	; 63
  12:	08 95       	ret

Disassembly of section .text.xTaskGetTickCountFromISR:

00000000 <xTaskGetTickCountFromISR>:
   0:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   4:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   8:	08 95       	ret

Disassembly of section .text.uxTaskGetNumberOfTasks:

00000000 <uxTaskGetNumberOfTasks>:
   0:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   4:	08 95       	ret

Disassembly of section .text.xTaskIncrementTick:

00000000 <xTaskIncrementTick>:
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  14:	81 11       	cpse	r24, r1
  16:	00 c0       	rjmp	.+0      	; 0x18 <xTaskIncrementTick+0x18>
  18:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  1c:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  20:	01 96       	adiw	r24, 0x01	; 1
  22:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
  26:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  2a:	e0 90 00 00 	lds	r14, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  2e:	f0 90 00 00 	lds	r15, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  32:	e1 14       	cp	r14, r1
  34:	f1 04       	cpc	r15, r1
  36:	01 f4       	brne	.+0      	; 0x38 <xTaskIncrementTick+0x38>
  38:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  3c:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  40:	20 91 00 00 	lds	r18, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  44:	30 91 00 00 	lds	r19, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  48:	30 93 00 00 	sts	0x0000, r19	; 0x800000 <__SREG__+0x7fffc1>
  4c:	20 93 00 00 	sts	0x0000, r18	; 0x800000 <__SREG__+0x7fffc1>
  50:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
  54:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  58:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  5c:	8f 5f       	subi	r24, 0xFF	; 255
  5e:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  62:	0e 94 00 00 	call	0	; 0x0 <xTaskIncrementTick>
  66:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  6a:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  6e:	c0 e0       	ldi	r28, 0x00	; 0
  70:	e8 16       	cp	r14, r24
  72:	f9 06       	cpc	r15, r25
  74:	00 f4       	brcc	.+0      	; 0x76 <xTaskIncrementTick+0x76>
  76:	00 c0       	rjmp	.+0      	; 0x78 <xTaskIncrementTick+0x78>
  78:	d9 e0       	ldi	r29, 0x09	; 9
  7a:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  7e:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  82:	80 81       	ld	r24, Z
  84:	81 11       	cpse	r24, r1
  86:	00 c0       	rjmp	.+0      	; 0x88 <xTaskIncrementTick+0x88>
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	9f ef       	ldi	r25, 0xFF	; 255
  8c:	00 c0       	rjmp	.+0      	; 0x8e <xTaskIncrementTick+0x8e>
  8e:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  92:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  96:	05 80       	ldd	r0, Z+5	; 0x05
  98:	f6 81       	ldd	r31, Z+6	; 0x06
  9a:	e0 2d       	mov	r30, r0
  9c:	06 81       	ldd	r16, Z+6	; 0x06
  9e:	17 81       	ldd	r17, Z+7	; 0x07
  a0:	d8 01       	movw	r26, r16
  a2:	12 96       	adiw	r26, 0x02	; 2
  a4:	8d 91       	ld	r24, X+
  a6:	9c 91       	ld	r25, X
  a8:	13 97       	sbiw	r26, 0x03	; 3
  aa:	e8 16       	cp	r14, r24
  ac:	f9 06       	cpc	r15, r25
  ae:	00 f4       	brcc	.+0      	; 0xb0 <xTaskIncrementTick+0xb0>
  b0:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
  b4:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  b8:	00 c0       	rjmp	.+0      	; 0xba <xTaskIncrementTick+0xba>
  ba:	68 01       	movw	r12, r16
  bc:	b2 e0       	ldi	r27, 0x02	; 2
  be:	cb 0e       	add	r12, r27
  c0:	d1 1c       	adc	r13, r1
  c2:	c6 01       	movw	r24, r12
  c4:	0e 94 00 00 	call	0	; 0x0 <xTaskIncrementTick>
  c8:	f8 01       	movw	r30, r16
  ca:	84 89       	ldd	r24, Z+20	; 0x14
  cc:	95 89       	ldd	r25, Z+21	; 0x15
  ce:	89 2b       	or	r24, r25
  d0:	01 f0       	breq	.+0      	; 0xd2 <xTaskIncrementTick+0xd2>
  d2:	c8 01       	movw	r24, r16
  d4:	0c 96       	adiw	r24, 0x0c	; 12
  d6:	0e 94 00 00 	call	0	; 0x0 <xTaskIncrementTick>
  da:	d8 01       	movw	r26, r16
  dc:	56 96       	adiw	r26, 0x16	; 22
  de:	8c 91       	ld	r24, X
  e0:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  e4:	98 17       	cp	r25, r24
  e6:	00 f4       	brcc	.+0      	; 0xe8 <xTaskIncrementTick+0xe8>
  e8:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  ec:	d8 9f       	mul	r29, r24
  ee:	c0 01       	movw	r24, r0
  f0:	11 24       	eor	r1, r1
  f2:	b6 01       	movw	r22, r12
  f4:	80 50       	subi	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	0e 94 00 00 	call	0	; 0x0 <xTaskIncrementTick>
  fc:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 100:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 104:	d8 01       	movw	r26, r16
 106:	56 96       	adiw	r26, 0x16	; 22
 108:	9c 91       	ld	r25, X
 10a:	86 89       	ldd	r24, Z+22	; 0x16
 10c:	98 17       	cp	r25, r24
 10e:	00 f4       	brcc	.+0      	; 0x110 <xTaskIncrementTick+0x110>
 110:	00 c0       	rjmp	.+0      	; 0x112 <xTaskIncrementTick+0x112>
 112:	c1 e0       	ldi	r28, 0x01	; 1
 114:	00 c0       	rjmp	.+0      	; 0x116 <xTaskIncrementTick+0x116>
 116:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 11a:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 11e:	e6 89       	ldd	r30, Z+22	; 0x16
 120:	b9 e0       	ldi	r27, 0x09	; 9
 122:	eb 9f       	mul	r30, r27
 124:	f0 01       	movw	r30, r0
 126:	11 24       	eor	r1, r1
 128:	e0 50       	subi	r30, 0x00	; 0
 12a:	f0 40       	sbci	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	00 f0       	brcs	.+0      	; 0x132 <xTaskIncrementTick+0x132>
 132:	c1 e0       	ldi	r28, 0x01	; 1
 134:	00 c0       	rjmp	.+0      	; 0x136 <xTaskIncrementTick+0x136>
 136:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
 140:	c0 e0       	ldi	r28, 0x00	; 0
 142:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 146:	81 11       	cpse	r24, r1
 148:	c1 e0       	ldi	r28, 0x01	; 1
 14a:	8c 2f       	mov	r24, r28
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	ff 90       	pop	r15
 156:	ef 90       	pop	r14
 158:	df 90       	pop	r13
 15a:	cf 90       	pop	r12
 15c:	08 95       	ret

Disassembly of section .text.xTaskResumeAll:

00000000 <xTaskResumeAll>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	0f b6       	in	r0, 0x3f	; 63
   e:	f8 94       	cli
  10:	0f 92       	push	r0
  12:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  16:	81 50       	subi	r24, 0x01	; 1
  18:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  1c:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  20:	88 23       	and	r24, r24
  22:	01 f0       	breq	.+0      	; 0x24 <xTaskResumeAll+0x24>
  24:	80 e0       	ldi	r24, 0x00	; 0
  26:	00 c0       	rjmp	.+0      	; 0x28 <xTaskResumeAll+0x28>
  28:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  2c:	88 23       	and	r24, r24
  2e:	01 f0       	breq	.+0      	; 0x30 <xTaskResumeAll+0x30>
  30:	89 e0       	ldi	r24, 0x09	; 9
  32:	f8 2e       	mov	r15, r24
  34:	ee 24       	eor	r14, r14
  36:	e3 94       	inc	r14
  38:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  3c:	88 23       	and	r24, r24
  3e:	01 f0       	breq	.+0      	; 0x40 <xTaskResumeAll+0x40>
  40:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  44:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  48:	c6 81       	ldd	r28, Z+6	; 0x06
  4a:	d7 81       	ldd	r29, Z+7	; 0x07
  4c:	ce 01       	movw	r24, r28
  4e:	0c 96       	adiw	r24, 0x0c	; 12
  50:	0e 94 00 00 	call	0	; 0x0 <xTaskResumeAll>
  54:	8e 01       	movw	r16, r28
  56:	0e 5f       	subi	r16, 0xFE	; 254
  58:	1f 4f       	sbci	r17, 0xFF	; 255
  5a:	c8 01       	movw	r24, r16
  5c:	0e 94 00 00 	call	0	; 0x0 <xTaskResumeAll>
  60:	8e 89       	ldd	r24, Y+22	; 0x16
  62:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  66:	98 17       	cp	r25, r24
  68:	00 f4       	brcc	.+0      	; 0x6a <xTaskResumeAll+0x6a>
  6a:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  6e:	f8 9e       	mul	r15, r24
  70:	c0 01       	movw	r24, r0
  72:	11 24       	eor	r1, r1
  74:	b8 01       	movw	r22, r16
  76:	80 50       	subi	r24, 0x00	; 0
  78:	90 40       	sbci	r25, 0x00	; 0
  7a:	0e 94 00 00 	call	0	; 0x0 <xTaskResumeAll>
  7e:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  82:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  86:	9e 89       	ldd	r25, Y+22	; 0x16
  88:	86 89       	ldd	r24, Z+22	; 0x16
  8a:	98 17       	cp	r25, r24
  8c:	00 f0       	brcs	.+0      	; 0x8e <xTaskResumeAll+0x8e>
  8e:	e0 92 00 00 	sts	0x0000, r14	; 0x800000 <__SREG__+0x7fffc1>
  92:	00 c0       	rjmp	.+0      	; 0x94 <xTaskResumeAll+0x94>
  94:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  98:	81 11       	cpse	r24, r1
  9a:	00 c0       	rjmp	.+0      	; 0x9c <xTaskResumeAll+0x9c>
  9c:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	01 f0       	breq	.+0      	; 0xa4 <xTaskResumeAll+0xa4>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <xTaskResumeAll+0xa6>
  a6:	0e 94 00 00 	call	0	; 0x0 <xTaskResumeAll>
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	00 c0       	rjmp	.+0      	; 0xae <xTaskResumeAll+0xae>
  ae:	c1 e0       	ldi	r28, 0x01	; 1
  b0:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  b4:	88 23       	and	r24, r24
  b6:	01 f0       	breq	.+0      	; 0xb8 <xTaskResumeAll+0xb8>
  b8:	0e 94 00 00 	call	0	; 0x0 <xTaskResumeAll>
  bc:	81 11       	cpse	r24, r1
  be:	c0 93 00 00 	sts	0x0000, r28	; 0x800000 <__SREG__+0x7fffc1>
  c2:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  c6:	81 50       	subi	r24, 0x01	; 1
  c8:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  cc:	00 c0       	rjmp	.+0      	; 0xce <xTaskResumeAll+0xce>
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	1f 91       	pop	r17
  d8:	0f 91       	pop	r16
  da:	ff 90       	pop	r15
  dc:	ef 90       	pop	r14
  de:	08 95       	ret

Disassembly of section .text.vTaskDelayUntil:

00000000 <vTaskDelayUntil>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
   a:	eb 01       	movw	r28, r22
   c:	0e 94 00 00 	call	0	; 0x0 <vTaskDelayUntil>
  10:	20 91 00 00 	lds	r18, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  14:	30 91 00 00 	lds	r19, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  18:	f8 01       	movw	r30, r16
  1a:	80 81       	ld	r24, Z
  1c:	91 81       	ldd	r25, Z+1	; 0x01
  1e:	c8 0f       	add	r28, r24
  20:	d9 1f       	adc	r29, r25
  22:	28 17       	cp	r18, r24
  24:	39 07       	cpc	r19, r25
  26:	00 f4       	brcc	.+0      	; 0x28 <vTaskDelayUntil+0x28>
  28:	c8 17       	cp	r28, r24
  2a:	d9 07       	cpc	r29, r25
  2c:	00 f4       	brcc	.+0      	; 0x2e <vTaskDelayUntil+0x2e>
  2e:	00 c0       	rjmp	.+0      	; 0x30 <vTaskDelayUntil+0x30>
  30:	c8 17       	cp	r28, r24
  32:	d9 07       	cpc	r29, r25
  34:	00 f0       	brcs	.+0      	; 0x36 <vTaskDelayUntil+0x36>
  36:	81 e0       	ldi	r24, 0x01	; 1
  38:	2c 17       	cp	r18, r28
  3a:	3d 07       	cpc	r19, r29
  3c:	00 f0       	brcs	.+0      	; 0x3e <vTaskDelayUntil+0x3e>
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	00 c0       	rjmp	.+0      	; 0x42 <vTaskDelayUntil+0x42>
  42:	81 e0       	ldi	r24, 0x01	; 1
  44:	f8 01       	movw	r30, r16
  46:	d1 83       	std	Z+1, r29	; 0x01
  48:	c0 83       	st	Z, r28
  4a:	88 23       	and	r24, r24
  4c:	01 f0       	breq	.+0      	; 0x4e <vTaskDelayUntil+0x4e>
  4e:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  52:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  56:	02 96       	adiw	r24, 0x02	; 2
  58:	0e 94 00 00 	call	0	; 0x0 <vTaskDelayUntil>
  5c:	ce 01       	movw	r24, r28
  5e:	0e 94 00 00 	call	0	; 0x0 <vTaskDelayUntil>
  62:	0e 94 00 00 	call	0	; 0x0 <vTaskDelayUntil>
  66:	81 11       	cpse	r24, r1
  68:	00 c0       	rjmp	.+0      	; 0x6a <vTaskDelayUntil+0x6a>
  6a:	0e 94 00 00 	call	0	; 0x0 <vTaskDelayUntil>
  6e:	df 91       	pop	r29
  70:	cf 91       	pop	r28
  72:	1f 91       	pop	r17
  74:	0f 91       	pop	r16
  76:	08 95       	ret

Disassembly of section .text.vTaskDelay:

00000000 <vTaskDelay>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	89 2b       	or	r24, r25
   8:	01 f4       	brne	.+0      	; 0xa <vTaskDelay+0xa>
   a:	0e 94 00 00 	call	0	; 0x0 <vTaskDelay>
   e:	00 c0       	rjmp	.+0      	; 0x10 <vTaskDelay+0x10>
  10:	0e 94 00 00 	call	0	; 0x0 <vTaskDelay>
  14:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  18:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  1c:	c8 0f       	add	r28, r24
  1e:	d9 1f       	adc	r29, r25
  20:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  24:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  28:	02 96       	adiw	r24, 0x02	; 2
  2a:	0e 94 00 00 	call	0	; 0x0 <vTaskDelay>
  2e:	ce 01       	movw	r24, r28
  30:	0e 94 00 00 	call	0	; 0x0 <vTaskDelay>
  34:	0e 94 00 00 	call	0	; 0x0 <vTaskDelay>
  38:	88 23       	and	r24, r24
  3a:	01 f0       	breq	.+0      	; 0x3c <vTaskDelay+0x3c>
  3c:	df 91       	pop	r29
  3e:	cf 91       	pop	r28
  40:	08 95       	ret

Disassembly of section .text.prvIdleTask:

00000000 <prvIdleTask>:
   0:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   4:	88 23       	and	r24, r24
   6:	01 f0       	breq	.+0      	; 0x8 <prvIdleTask+0x8>
   8:	0e 94 00 00 	call	0	; 0x0 <prvIdleTask>
   c:	c0 91 00 00 	lds	r28, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  10:	0e 94 00 00 	call	0	; 0x0 <prvIdleTask>
  14:	cc 23       	and	r28, r28
  16:	01 f0       	breq	.+0      	; 0x18 <prvIdleTask+0x18>
  18:	0f b6       	in	r0, 0x3f	; 63
  1a:	f8 94       	cli
  1c:	0f 92       	push	r0
  1e:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  22:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  26:	c6 81       	ldd	r28, Z+6	; 0x06
  28:	d7 81       	ldd	r29, Z+7	; 0x07
  2a:	ce 01       	movw	r24, r28
  2c:	02 96       	adiw	r24, 0x02	; 2
  2e:	0e 94 00 00 	call	0	; 0x0 <prvIdleTask>
  32:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  36:	81 50       	subi	r24, 0x01	; 1
  38:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  3c:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  40:	81 50       	subi	r24, 0x01	; 1
  42:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  46:	0f 90       	pop	r0
  48:	0f be       	out	0x3f, r0	; 63
  4a:	8f 89       	ldd	r24, Y+23	; 0x17
  4c:	98 8d       	ldd	r25, Y+24	; 0x18
  4e:	0e 94 00 00 	call	0	; 0x0 <prvIdleTask>
  52:	ce 01       	movw	r24, r28
  54:	0e 94 00 00 	call	0	; 0x0 <prvIdleTask>
  58:	00 c0       	rjmp	.+0      	; 0x5a <prvIdleTask+0x5a>
  5a:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  5e:	82 30       	cpi	r24, 0x02	; 2
  60:	00 f0       	brcs	.+0      	; 0x62 <prvIdleTask+0x62>
  62:	0e 94 00 00 	call	0	; 0x0 <prvIdleTask>
  66:	00 c0       	rjmp	.+0      	; 0x68 <__SREG__+0x29>

Disassembly of section .text.vTaskSwitchContext:

00000000 <vTaskSwitchContext>:
   0:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   4:	88 23       	and	r24, r24
   6:	01 f0       	breq	.+0      	; 0x8 <vTaskSwitchContext+0x8>
   8:	81 e0       	ldi	r24, 0x01	; 1
   a:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
   e:	08 95       	ret
  10:	10 92 00 00 	sts	0x0000, r1	; 0x800000 <__SREG__+0x7fffc1>
  14:	99 e0       	ldi	r25, 0x09	; 9
  16:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  1a:	9e 9f       	mul	r25, r30
  1c:	f0 01       	movw	r30, r0
  1e:	11 24       	eor	r1, r1
  20:	e0 50       	subi	r30, 0x00	; 0
  22:	f0 40       	sbci	r31, 0x00	; 0
  24:	80 81       	ld	r24, Z
  26:	81 11       	cpse	r24, r1
  28:	00 c0       	rjmp	.+0      	; 0x2a <vTaskSwitchContext+0x2a>
  2a:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  2e:	81 50       	subi	r24, 0x01	; 1
  30:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  34:	00 c0       	rjmp	.+0      	; 0x36 <vTaskSwitchContext+0x36>
  36:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	49 e0       	ldi	r20, 0x09	; 9
  3e:	48 9f       	mul	r20, r24
  40:	90 01       	movw	r18, r0
  42:	49 9f       	mul	r20, r25
  44:	30 0d       	add	r19, r0
  46:	11 24       	eor	r1, r1
  48:	f9 01       	movw	r30, r18
  4a:	e0 50       	subi	r30, 0x00	; 0
  4c:	f0 40       	sbci	r31, 0x00	; 0
  4e:	a1 81       	ldd	r26, Z+1	; 0x01
  50:	b2 81       	ldd	r27, Z+2	; 0x02
  52:	12 96       	adiw	r26, 0x02	; 2
  54:	0d 90       	ld	r0, X+
  56:	bc 91       	ld	r27, X
  58:	a0 2d       	mov	r26, r0
  5a:	b2 83       	std	Z+2, r27	; 0x02
  5c:	a1 83       	std	Z+1, r26	; 0x01
  5e:	20 50       	subi	r18, 0x00	; 0
  60:	30 40       	sbci	r19, 0x00	; 0
  62:	a2 17       	cp	r26, r18
  64:	b3 07       	cpc	r27, r19
  66:	01 f4       	brne	.+0      	; 0x68 <vTaskSwitchContext+0x68>
  68:	12 96       	adiw	r26, 0x02	; 2
  6a:	2d 91       	ld	r18, X+
  6c:	3c 91       	ld	r19, X
  6e:	13 97       	sbiw	r26, 0x03	; 3
  70:	32 83       	std	Z+2, r19	; 0x02
  72:	21 83       	std	Z+1, r18	; 0x01
  74:	29 e0       	ldi	r18, 0x09	; 9
  76:	28 9f       	mul	r18, r24
  78:	f0 01       	movw	r30, r0
  7a:	29 9f       	mul	r18, r25
  7c:	f0 0d       	add	r31, r0
  7e:	11 24       	eor	r1, r1
  80:	e0 50       	subi	r30, 0x00	; 0
  82:	f0 40       	sbci	r31, 0x00	; 0
  84:	01 80       	ldd	r0, Z+1	; 0x01
  86:	f2 81       	ldd	r31, Z+2	; 0x02
  88:	e0 2d       	mov	r30, r0
  8a:	86 81       	ldd	r24, Z+6	; 0x06
  8c:	97 81       	ldd	r25, Z+7	; 0x07
  8e:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
  92:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  96:	08 95       	ret

Disassembly of section .text.vTaskPlaceOnEventList:

00000000 <vTaskPlaceOnEventList>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	eb 01       	movw	r28, r22
   6:	60 91 00 00 	lds	r22, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   a:	70 91 00 00 	lds	r23, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   e:	64 5f       	subi	r22, 0xF4	; 244
  10:	7f 4f       	sbci	r23, 0xFF	; 255
  12:	0e 94 00 00 	call	0	; 0x0 <vTaskPlaceOnEventList>
  16:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  1a:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  1e:	02 96       	adiw	r24, 0x02	; 2
  20:	0e 94 00 00 	call	0	; 0x0 <vTaskPlaceOnEventList>
  24:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  28:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  2c:	8c 0f       	add	r24, r28
  2e:	9d 1f       	adc	r25, r29
  30:	df 91       	pop	r29
  32:	cf 91       	pop	r28
  34:	0c 94 00 00 	jmp	0	; 0x0 <vTaskPlaceOnEventList>

Disassembly of section .text.vTaskPlaceOnUnorderedEventList:

00000000 <vTaskPlaceOnUnorderedEventList>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ea 01       	movw	r28, r20
   6:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   a:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   e:	70 68       	ori	r23, 0x80	; 128
  10:	75 87       	std	Z+13, r23	; 0x0d
  12:	64 87       	std	Z+12, r22	; 0x0c
  14:	60 91 00 00 	lds	r22, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  18:	70 91 00 00 	lds	r23, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  1c:	64 5f       	subi	r22, 0xF4	; 244
  1e:	7f 4f       	sbci	r23, 0xFF	; 255
  20:	0e 94 00 00 	call	0	; 0x0 <vTaskPlaceOnUnorderedEventList>
  24:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  28:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  2c:	02 96       	adiw	r24, 0x02	; 2
  2e:	0e 94 00 00 	call	0	; 0x0 <vTaskPlaceOnUnorderedEventList>
  32:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  36:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  3a:	8c 0f       	add	r24, r28
  3c:	9d 1f       	adc	r25, r29
  3e:	df 91       	pop	r29
  40:	cf 91       	pop	r28
  42:	0c 94 00 00 	jmp	0	; 0x0 <vTaskPlaceOnUnorderedEventList>

Disassembly of section .text.xTaskRemoveFromEventList:

00000000 <xTaskRemoveFromEventList>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	dc 01       	movw	r26, r24
   a:	15 96       	adiw	r26, 0x05	; 5
   c:	ed 91       	ld	r30, X+
   e:	fc 91       	ld	r31, X
  10:	16 97       	sbiw	r26, 0x06	; 6
  12:	c6 81       	ldd	r28, Z+6	; 0x06
  14:	d7 81       	ldd	r29, Z+7	; 0x07
  16:	8e 01       	movw	r16, r28
  18:	04 5f       	subi	r16, 0xF4	; 244
  1a:	1f 4f       	sbci	r17, 0xFF	; 255
  1c:	c8 01       	movw	r24, r16
  1e:	0e 94 00 00 	call	0	; 0x0 <xTaskRemoveFromEventList>
  22:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  26:	81 11       	cpse	r24, r1
  28:	00 c0       	rjmp	.+0      	; 0x2a <xTaskRemoveFromEventList+0x2a>
  2a:	0a 50       	subi	r16, 0x0A	; 10
  2c:	11 09       	sbc	r17, r1
  2e:	c8 01       	movw	r24, r16
  30:	0e 94 00 00 	call	0	; 0x0 <xTaskRemoveFromEventList>
  34:	8e 89       	ldd	r24, Y+22	; 0x16
  36:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  3a:	98 17       	cp	r25, r24
  3c:	00 f4       	brcc	.+0      	; 0x3e <xTaskRemoveFromEventList+0x3e>
  3e:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  42:	b9 e0       	ldi	r27, 0x09	; 9
  44:	8b 9f       	mul	r24, r27
  46:	c0 01       	movw	r24, r0
  48:	11 24       	eor	r1, r1
  4a:	b8 01       	movw	r22, r16
  4c:	80 50       	subi	r24, 0x00	; 0
  4e:	90 40       	sbci	r25, 0x00	; 0
  50:	00 c0       	rjmp	.+0      	; 0x52 <xTaskRemoveFromEventList+0x52>
  52:	b8 01       	movw	r22, r16
  54:	80 e0       	ldi	r24, 0x00	; 0
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	0e 94 00 00 	call	0	; 0x0 <xTaskRemoveFromEventList>
  5c:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  60:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  64:	9e 89       	ldd	r25, Y+22	; 0x16
  66:	86 89       	ldd	r24, Z+22	; 0x16
  68:	89 17       	cp	r24, r25
  6a:	00 f4       	brcc	.+0      	; 0x6c <xTaskRemoveFromEventList+0x6c>
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  72:	00 c0       	rjmp	.+0      	; 0x74 <xTaskRemoveFromEventList+0x74>
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	df 91       	pop	r29
  78:	cf 91       	pop	r28
  7a:	1f 91       	pop	r17
  7c:	0f 91       	pop	r16
  7e:	08 95       	ret

Disassembly of section .text.xTaskRemoveFromUnorderedEventList:

00000000 <xTaskRemoveFromUnorderedEventList>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	70 68       	ori	r23, 0x80	; 128
   a:	fc 01       	movw	r30, r24
   c:	71 83       	std	Z+1, r23	; 0x01
   e:	60 83       	st	Z, r22
  10:	c6 81       	ldd	r28, Z+6	; 0x06
  12:	d7 81       	ldd	r29, Z+7	; 0x07
  14:	0e 94 00 00 	call	0	; 0x0 <xTaskRemoveFromUnorderedEventList>
  18:	8e 01       	movw	r16, r28
  1a:	0e 5f       	subi	r16, 0xFE	; 254
  1c:	1f 4f       	sbci	r17, 0xFF	; 255
  1e:	c8 01       	movw	r24, r16
  20:	0e 94 00 00 	call	0	; 0x0 <xTaskRemoveFromUnorderedEventList>
  24:	8e 89       	ldd	r24, Y+22	; 0x16
  26:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  2a:	98 17       	cp	r25, r24
  2c:	00 f4       	brcc	.+0      	; 0x2e <xTaskRemoveFromUnorderedEventList+0x2e>
  2e:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  32:	f9 e0       	ldi	r31, 0x09	; 9
  34:	8f 9f       	mul	r24, r31
  36:	c0 01       	movw	r24, r0
  38:	11 24       	eor	r1, r1
  3a:	b8 01       	movw	r22, r16
  3c:	80 50       	subi	r24, 0x00	; 0
  3e:	90 40       	sbci	r25, 0x00	; 0
  40:	0e 94 00 00 	call	0	; 0x0 <xTaskRemoveFromUnorderedEventList>
  44:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  48:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  4c:	9e 89       	ldd	r25, Y+22	; 0x16
  4e:	86 89       	ldd	r24, Z+22	; 0x16
  50:	89 17       	cp	r24, r25
  52:	00 f4       	brcc	.+0      	; 0x54 <xTaskRemoveFromUnorderedEventList+0x54>
  54:	81 e0       	ldi	r24, 0x01	; 1
  56:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <xTaskRemoveFromUnorderedEventList+0x5c>
  5c:	80 e0       	ldi	r24, 0x00	; 0
  5e:	df 91       	pop	r29
  60:	cf 91       	pop	r28
  62:	1f 91       	pop	r17
  64:	0f 91       	pop	r16
  66:	08 95       	ret

Disassembly of section .text.vTaskSetTimeOutState:

00000000 <vTaskSetTimeOutState>:
   0:	20 91 00 00 	lds	r18, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   4:	fc 01       	movw	r30, r24
   6:	20 83       	st	Z, r18
   8:	20 91 00 00 	lds	r18, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   c:	30 91 00 00 	lds	r19, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  10:	32 83       	std	Z+2, r19	; 0x02
  12:	21 83       	std	Z+1, r18	; 0x01
  14:	08 95       	ret

Disassembly of section .text.xTaskCheckForTimeOut:

00000000 <xTaskCheckForTimeOut>:
   0:	0f b6       	in	r0, 0x3f	; 63
   2:	f8 94       	cli
   4:	0f 92       	push	r0
   6:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   a:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   e:	40 91 00 00 	lds	r20, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  12:	dc 01       	movw	r26, r24
  14:	5c 91       	ld	r21, X
  16:	11 96       	adiw	r26, 0x01	; 1
  18:	2d 91       	ld	r18, X+
  1a:	3c 91       	ld	r19, X
  1c:	12 97       	sbiw	r26, 0x02	; 2
  1e:	54 17       	cp	r21, r20
  20:	01 f0       	breq	.+0      	; 0x22 <xTaskCheckForTimeOut+0x22>
  22:	e2 17       	cp	r30, r18
  24:	f3 07       	cpc	r31, r19
  26:	00 f4       	brcc	.+0      	; 0x28 <xTaskCheckForTimeOut+0x28>
  28:	db 01       	movw	r26, r22
  2a:	4d 91       	ld	r20, X+
  2c:	5c 91       	ld	r21, X
  2e:	df 01       	movw	r26, r30
  30:	a2 1b       	sub	r26, r18
  32:	b3 0b       	sbc	r27, r19
  34:	a4 17       	cp	r26, r20
  36:	b5 07       	cpc	r27, r21
  38:	00 f4       	brcc	.+0      	; 0x3a <xTaskCheckForTimeOut+0x3a>
  3a:	db 01       	movw	r26, r22
  3c:	2e 1b       	sub	r18, r30
  3e:	3f 0b       	sbc	r19, r31
  40:	24 0f       	add	r18, r20
  42:	35 1f       	adc	r19, r21
  44:	2d 93       	st	X+, r18
  46:	3c 93       	st	X, r19
  48:	0e 94 00 00 	call	0	; 0x0 <xTaskCheckForTimeOut>
  4c:	80 e0       	ldi	r24, 0x00	; 0
  4e:	00 c0       	rjmp	.+0      	; 0x50 <xTaskCheckForTimeOut+0x50>
  50:	81 e0       	ldi	r24, 0x01	; 1
  52:	0f 90       	pop	r0
  54:	0f be       	out	0x3f, r0	; 63
  56:	08 95       	ret

Disassembly of section .text.vTaskMissedYield:

00000000 <vTaskMissedYield>:
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
   6:	08 95       	ret

Disassembly of section .text.uxTaskResetEventItemValue:

00000000 <uxTaskResetEventItemValue>:
   0:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   4:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   8:	84 85       	ldd	r24, Z+12	; 0x0c
   a:	95 85       	ldd	r25, Z+13	; 0x0d
   c:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  10:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  14:	a0 91 00 00 	lds	r26, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  18:	b0 91 00 00 	lds	r27, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  1c:	56 96       	adiw	r26, 0x16	; 22
  1e:	4c 91       	ld	r20, X
  20:	24 e0       	ldi	r18, 0x04	; 4
  22:	30 e0       	ldi	r19, 0x00	; 0
  24:	24 1b       	sub	r18, r20
  26:	31 09       	sbc	r19, r1
  28:	35 87       	std	Z+13, r19	; 0x0d
  2a:	24 87       	std	Z+12, r18	; 0x0c
  2c:	08 95       	ret

Disassembly of section .text.ulTaskNotifyTake:

00000000 <ulTaskNotifyTake>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	18 2f       	mov	r17, r24
   a:	eb 01       	movw	r28, r22
   c:	0f b6       	in	r0, 0x3f	; 63
   e:	f8 94       	cli
  10:	0f 92       	push	r0
  12:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  16:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  1a:	81 a1       	ldd	r24, Z+33	; 0x21
  1c:	92 a1       	ldd	r25, Z+34	; 0x22
  1e:	a3 a1       	ldd	r26, Z+35	; 0x23
  20:	b4 a1       	ldd	r27, Z+36	; 0x24
  22:	89 2b       	or	r24, r25
  24:	8a 2b       	or	r24, r26
  26:	8b 2b       	or	r24, r27
  28:	01 f4       	brne	.+0      	; 0x2a <ulTaskNotifyTake+0x2a>
  2a:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  2e:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  32:	81 e0       	ldi	r24, 0x01	; 1
  34:	85 a3       	std	Z+37, r24	; 0x25
  36:	20 97       	sbiw	r28, 0x00	; 0
  38:	01 f0       	breq	.+0      	; 0x3a <ulTaskNotifyTake+0x3a>
  3a:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  3e:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  42:	02 96       	adiw	r24, 0x02	; 2
  44:	0e 94 00 00 	call	0	; 0x0 <ulTaskNotifyTake>
  48:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  4c:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  50:	8c 0f       	add	r24, r28
  52:	9d 1f       	adc	r25, r29
  54:	0e 94 00 00 	call	0	; 0x0 <ulTaskNotifyTake>
  58:	0e 94 00 00 	call	0	; 0x0 <ulTaskNotifyTake>
  5c:	0f 90       	pop	r0
  5e:	0f be       	out	0x3f, r0	; 63
  60:	0f b6       	in	r0, 0x3f	; 63
  62:	f8 94       	cli
  64:	0f 92       	push	r0
  66:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  6a:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  6e:	61 a1       	ldd	r22, Z+33	; 0x21
  70:	72 a1       	ldd	r23, Z+34	; 0x22
  72:	83 a1       	ldd	r24, Z+35	; 0x23
  74:	94 a1       	ldd	r25, Z+36	; 0x24
  76:	61 15       	cp	r22, r1
  78:	71 05       	cpc	r23, r1
  7a:	81 05       	cpc	r24, r1
  7c:	91 05       	cpc	r25, r1
  7e:	01 f0       	breq	.+0      	; 0x80 <ulTaskNotifyTake+0x80>
  80:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  84:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  88:	11 23       	and	r17, r17
  8a:	01 f0       	breq	.+0      	; 0x8c <ulTaskNotifyTake+0x8c>
  8c:	11 a2       	std	Z+33, r1	; 0x21
  8e:	12 a2       	std	Z+34, r1	; 0x22
  90:	13 a2       	std	Z+35, r1	; 0x23
  92:	14 a2       	std	Z+36, r1	; 0x24
  94:	00 c0       	rjmp	.+0      	; 0x96 <ulTaskNotifyTake+0x96>
  96:	01 a1       	ldd	r16, Z+33	; 0x21
  98:	12 a1       	ldd	r17, Z+34	; 0x22
  9a:	23 a1       	ldd	r18, Z+35	; 0x23
  9c:	34 a1       	ldd	r19, Z+36	; 0x24
  9e:	01 50       	subi	r16, 0x01	; 1
  a0:	11 09       	sbc	r17, r1
  a2:	21 09       	sbc	r18, r1
  a4:	31 09       	sbc	r19, r1
  a6:	01 a3       	std	Z+33, r16	; 0x21
  a8:	12 a3       	std	Z+34, r17	; 0x22
  aa:	23 a3       	std	Z+35, r18	; 0x23
  ac:	34 a3       	std	Z+36, r19	; 0x24
  ae:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  b2:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  b6:	15 a2       	std	Z+37, r1	; 0x25
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	1f 91       	pop	r17
  c2:	0f 91       	pop	r16
  c4:	08 95       	ret

Disassembly of section .text.xTaskNotifyWait:

00000000 <xTaskNotifyWait>:
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	6f 92       	push	r6
   6:	7f 92       	push	r7
   8:	8f 92       	push	r8
   a:	9f 92       	push	r9
   c:	af 92       	push	r10
   e:	bf 92       	push	r11
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	49 01       	movw	r8, r18
  1a:	5a 01       	movw	r10, r20
  1c:	0f b6       	in	r0, 0x3f	; 63
  1e:	f8 94       	cli
  20:	0f 92       	push	r0
  22:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  26:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  2a:	25 a1       	ldd	r18, Z+37	; 0x25
  2c:	22 30       	cpi	r18, 0x02	; 2
  2e:	01 f0       	breq	.+0      	; 0x30 <xTaskNotifyWait+0x30>
  30:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  34:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  38:	21 a1       	ldd	r18, Z+33	; 0x21
  3a:	32 a1       	ldd	r19, Z+34	; 0x22
  3c:	43 a1       	ldd	r20, Z+35	; 0x23
  3e:	54 a1       	ldd	r21, Z+36	; 0x24
  40:	2b 01       	movw	r4, r22
  42:	3c 01       	movw	r6, r24
  44:	40 94       	com	r4
  46:	50 94       	com	r5
  48:	60 94       	com	r6
  4a:	70 94       	com	r7
  4c:	d3 01       	movw	r26, r6
  4e:	c2 01       	movw	r24, r4
  50:	82 23       	and	r24, r18
  52:	93 23       	and	r25, r19
  54:	a4 23       	and	r26, r20
  56:	b5 23       	and	r27, r21
  58:	81 a3       	std	Z+33, r24	; 0x21
  5a:	92 a3       	std	Z+34, r25	; 0x22
  5c:	a3 a3       	std	Z+35, r26	; 0x23
  5e:	b4 a3       	std	Z+36, r27	; 0x24
  60:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  64:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  68:	81 e0       	ldi	r24, 0x01	; 1
  6a:	85 a3       	std	Z+37, r24	; 0x25
  6c:	e1 14       	cp	r14, r1
  6e:	f1 04       	cpc	r15, r1
  70:	01 f0       	breq	.+0      	; 0x72 <xTaskNotifyWait+0x72>
  72:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  76:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  7a:	02 96       	adiw	r24, 0x02	; 2
  7c:	0e 94 00 00 	call	0	; 0x0 <xTaskNotifyWait>
  80:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  84:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  88:	8e 0d       	add	r24, r14
  8a:	9f 1d       	adc	r25, r15
  8c:	0e 94 00 00 	call	0	; 0x0 <xTaskNotifyWait>
  90:	0e 94 00 00 	call	0	; 0x0 <xTaskNotifyWait>
  94:	0f 90       	pop	r0
  96:	0f be       	out	0x3f, r0	; 63
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	f8 94       	cli
  9c:	0f 92       	push	r0
  9e:	01 15       	cp	r16, r1
  a0:	11 05       	cpc	r17, r1
  a2:	01 f0       	breq	.+0      	; 0xa4 <xTaskNotifyWait+0xa4>
  a4:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  a8:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  ac:	81 a1       	ldd	r24, Z+33	; 0x21
  ae:	92 a1       	ldd	r25, Z+34	; 0x22
  b0:	a3 a1       	ldd	r26, Z+35	; 0x23
  b2:	b4 a1       	ldd	r27, Z+36	; 0x24
  b4:	f8 01       	movw	r30, r16
  b6:	80 83       	st	Z, r24
  b8:	91 83       	std	Z+1, r25	; 0x01
  ba:	a2 83       	std	Z+2, r26	; 0x02
  bc:	b3 83       	std	Z+3, r27	; 0x03
  be:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  c2:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  c6:	85 a1       	ldd	r24, Z+37	; 0x25
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	01 f0       	breq	.+0      	; 0xcc <xTaskNotifyWait+0xcc>
  cc:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  d0:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  d4:	41 a1       	ldd	r20, Z+33	; 0x21
  d6:	52 a1       	ldd	r21, Z+34	; 0x22
  d8:	63 a1       	ldd	r22, Z+35	; 0x23
  da:	74 a1       	ldd	r23, Z+36	; 0x24
  dc:	d5 01       	movw	r26, r10
  de:	c4 01       	movw	r24, r8
  e0:	80 95       	com	r24
  e2:	90 95       	com	r25
  e4:	a0 95       	com	r26
  e6:	b0 95       	com	r27
  e8:	84 23       	and	r24, r20
  ea:	95 23       	and	r25, r21
  ec:	a6 23       	and	r26, r22
  ee:	b7 23       	and	r27, r23
  f0:	81 a3       	std	Z+33, r24	; 0x21
  f2:	92 a3       	std	Z+34, r25	; 0x22
  f4:	a3 a3       	std	Z+35, r26	; 0x23
  f6:	b4 a3       	std	Z+36, r27	; 0x24
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	00 c0       	rjmp	.+0      	; 0xfc <xTaskNotifyWait+0xfc>
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 102:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
 106:	15 a2       	std	Z+37, r1	; 0x25
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	ff 90       	pop	r15
 112:	ef 90       	pop	r14
 114:	bf 90       	pop	r11
 116:	af 90       	pop	r10
 118:	9f 90       	pop	r9
 11a:	8f 90       	pop	r8
 11c:	7f 90       	pop	r7
 11e:	6f 90       	pop	r6
 120:	5f 90       	pop	r5
 122:	4f 90       	pop	r4
 124:	08 95       	ret

Disassembly of section .text.xTaskGenericNotify:

00000000 <xTaskGenericNotify>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	fc 01       	movw	r30, r24
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	0f 92       	push	r0
  10:	01 15       	cp	r16, r1
  12:	11 05       	cpc	r17, r1
  14:	01 f0       	breq	.+0      	; 0x16 <xTaskGenericNotify+0x16>
  16:	81 a1       	ldd	r24, Z+33	; 0x21
  18:	92 a1       	ldd	r25, Z+34	; 0x22
  1a:	a3 a1       	ldd	r26, Z+35	; 0x23
  1c:	b4 a1       	ldd	r27, Z+36	; 0x24
  1e:	e8 01       	movw	r28, r16
  20:	88 83       	st	Y, r24
  22:	99 83       	std	Y+1, r25	; 0x01
  24:	aa 83       	std	Y+2, r26	; 0x02
  26:	bb 83       	std	Y+3, r27	; 0x03
  28:	35 a1       	ldd	r19, Z+37	; 0x25
  2a:	82 e0       	ldi	r24, 0x02	; 2
  2c:	85 a3       	std	Z+37, r24	; 0x25
  2e:	22 30       	cpi	r18, 0x02	; 2
  30:	01 f0       	breq	.+0      	; 0x32 <xTaskGenericNotify+0x32>
  32:	00 f4       	brcc	.+0      	; 0x34 <xTaskGenericNotify+0x34>
  34:	21 30       	cpi	r18, 0x01	; 1
  36:	01 f4       	brne	.+0      	; 0x38 <xTaskGenericNotify+0x38>
  38:	81 a1       	ldd	r24, Z+33	; 0x21
  3a:	92 a1       	ldd	r25, Z+34	; 0x22
  3c:	a3 a1       	ldd	r26, Z+35	; 0x23
  3e:	b4 a1       	ldd	r27, Z+36	; 0x24
  40:	48 2b       	or	r20, r24
  42:	59 2b       	or	r21, r25
  44:	6a 2b       	or	r22, r26
  46:	7b 2b       	or	r23, r27
  48:	00 c0       	rjmp	.+0      	; 0x4a <xTaskGenericNotify+0x4a>
  4a:	23 30       	cpi	r18, 0x03	; 3
  4c:	01 f0       	breq	.+0      	; 0x4e <xTaskGenericNotify+0x4e>
  4e:	24 30       	cpi	r18, 0x04	; 4
  50:	01 f0       	breq	.+0      	; 0x52 <xTaskGenericNotify+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <xTaskGenericNotify+0x54>
  54:	81 a1       	ldd	r24, Z+33	; 0x21
  56:	92 a1       	ldd	r25, Z+34	; 0x22
  58:	a3 a1       	ldd	r26, Z+35	; 0x23
  5a:	b4 a1       	ldd	r27, Z+36	; 0x24
  5c:	01 96       	adiw	r24, 0x01	; 1
  5e:	a1 1d       	adc	r26, r1
  60:	b1 1d       	adc	r27, r1
  62:	81 a3       	std	Z+33, r24	; 0x21
  64:	92 a3       	std	Z+34, r25	; 0x22
  66:	a3 a3       	std	Z+35, r26	; 0x23
  68:	b4 a3       	std	Z+36, r27	; 0x24
  6a:	00 c0       	rjmp	.+0      	; 0x6c <xTaskGenericNotify+0x6c>
  6c:	32 30       	cpi	r19, 0x02	; 2
  6e:	01 f0       	breq	.+0      	; 0x70 <xTaskGenericNotify+0x70>
  70:	41 a3       	std	Z+33, r20	; 0x21
  72:	52 a3       	std	Z+34, r21	; 0x22
  74:	63 a3       	std	Z+35, r22	; 0x23
  76:	74 a3       	std	Z+36, r23	; 0x24
  78:	31 30       	cpi	r19, 0x01	; 1
  7a:	01 f4       	brne	.+0      	; 0x7c <xTaskGenericNotify+0x7c>
  7c:	ef 01       	movw	r28, r30
  7e:	8f 01       	movw	r16, r30
  80:	0e 5f       	subi	r16, 0xFE	; 254
  82:	1f 4f       	sbci	r17, 0xFF	; 255
  84:	c8 01       	movw	r24, r16
  86:	0e 94 00 00 	call	0	; 0x0 <xTaskGenericNotify>
  8a:	8e 89       	ldd	r24, Y+22	; 0x16
  8c:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  90:	98 17       	cp	r25, r24
  92:	00 f4       	brcc	.+0      	; 0x94 <xTaskGenericNotify+0x94>
  94:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  98:	29 e0       	ldi	r18, 0x09	; 9
  9a:	82 9f       	mul	r24, r18
  9c:	c0 01       	movw	r24, r0
  9e:	11 24       	eor	r1, r1
  a0:	b8 01       	movw	r22, r16
  a2:	80 50       	subi	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	0e 94 00 00 	call	0	; 0x0 <xTaskGenericNotify>
  aa:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  ae:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  b2:	9e 89       	ldd	r25, Y+22	; 0x16
  b4:	86 89       	ldd	r24, Z+22	; 0x16
  b6:	89 17       	cp	r24, r25
  b8:	00 f4       	brcc	.+0      	; 0xba <xTaskGenericNotify+0xba>
  ba:	0e 94 00 00 	call	0	; 0x0 <xTaskGenericNotify>
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <xTaskGenericNotify+0xc2>
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	1f 91       	pop	r17
  ce:	0f 91       	pop	r16
  d0:	08 95       	ret

Disassembly of section .text.xTaskNotifyFromISR:

00000000 <xTaskNotifyFromISR>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	fc 01       	movw	r30, r24
   e:	35 a1       	ldd	r19, Z+37	; 0x25
  10:	82 e0       	ldi	r24, 0x02	; 2
  12:	85 a3       	std	Z+37, r24	; 0x25
  14:	22 30       	cpi	r18, 0x02	; 2
  16:	01 f0       	breq	.+0      	; 0x18 <xTaskNotifyFromISR+0x18>
  18:	00 f4       	brcc	.+0      	; 0x1a <xTaskNotifyFromISR+0x1a>
  1a:	21 30       	cpi	r18, 0x01	; 1
  1c:	01 f4       	brne	.+0      	; 0x1e <xTaskNotifyFromISR+0x1e>
  1e:	81 a1       	ldd	r24, Z+33	; 0x21
  20:	92 a1       	ldd	r25, Z+34	; 0x22
  22:	a3 a1       	ldd	r26, Z+35	; 0x23
  24:	b4 a1       	ldd	r27, Z+36	; 0x24
  26:	48 2b       	or	r20, r24
  28:	59 2b       	or	r21, r25
  2a:	6a 2b       	or	r22, r26
  2c:	7b 2b       	or	r23, r27
  2e:	00 c0       	rjmp	.+0      	; 0x30 <xTaskNotifyFromISR+0x30>
  30:	23 30       	cpi	r18, 0x03	; 3
  32:	01 f0       	breq	.+0      	; 0x34 <xTaskNotifyFromISR+0x34>
  34:	24 30       	cpi	r18, 0x04	; 4
  36:	01 f0       	breq	.+0      	; 0x38 <xTaskNotifyFromISR+0x38>
  38:	00 c0       	rjmp	.+0      	; 0x3a <xTaskNotifyFromISR+0x3a>
  3a:	81 a1       	ldd	r24, Z+33	; 0x21
  3c:	92 a1       	ldd	r25, Z+34	; 0x22
  3e:	a3 a1       	ldd	r26, Z+35	; 0x23
  40:	b4 a1       	ldd	r27, Z+36	; 0x24
  42:	01 96       	adiw	r24, 0x01	; 1
  44:	a1 1d       	adc	r26, r1
  46:	b1 1d       	adc	r27, r1
  48:	81 a3       	std	Z+33, r24	; 0x21
  4a:	92 a3       	std	Z+34, r25	; 0x22
  4c:	a3 a3       	std	Z+35, r26	; 0x23
  4e:	b4 a3       	std	Z+36, r27	; 0x24
  50:	00 c0       	rjmp	.+0      	; 0x52 <xTaskNotifyFromISR+0x52>
  52:	32 30       	cpi	r19, 0x02	; 2
  54:	01 f0       	breq	.+0      	; 0x56 <xTaskNotifyFromISR+0x56>
  56:	41 a3       	std	Z+33, r20	; 0x21
  58:	52 a3       	std	Z+34, r21	; 0x22
  5a:	63 a3       	std	Z+35, r22	; 0x23
  5c:	74 a3       	std	Z+36, r23	; 0x24
  5e:	31 30       	cpi	r19, 0x01	; 1
  60:	01 f0       	breq	.+0      	; 0x62 <xTaskNotifyFromISR+0x62>
  62:	81 e0       	ldi	r24, 0x01	; 1
  64:	00 c0       	rjmp	.+0      	; 0x66 <xTaskNotifyFromISR+0x66>
  66:	ef 01       	movw	r28, r30
  68:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  6c:	81 11       	cpse	r24, r1
  6e:	00 c0       	rjmp	.+0      	; 0x70 <xTaskNotifyFromISR+0x70>
  70:	7f 01       	movw	r14, r30
  72:	22 e0       	ldi	r18, 0x02	; 2
  74:	e2 0e       	add	r14, r18
  76:	f1 1c       	adc	r15, r1
  78:	c7 01       	movw	r24, r14
  7a:	0e 94 00 00 	call	0	; 0x0 <xTaskNotifyFromISR>
  7e:	8e 89       	ldd	r24, Y+22	; 0x16
  80:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  84:	98 17       	cp	r25, r24
  86:	00 f4       	brcc	.+0      	; 0x88 <xTaskNotifyFromISR+0x88>
  88:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  8c:	e9 e0       	ldi	r30, 0x09	; 9
  8e:	8e 9f       	mul	r24, r30
  90:	c0 01       	movw	r24, r0
  92:	11 24       	eor	r1, r1
  94:	b7 01       	movw	r22, r14
  96:	80 50       	subi	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	00 c0       	rjmp	.+0      	; 0x9c <xTaskNotifyFromISR+0x9c>
  9c:	bf 01       	movw	r22, r30
  9e:	64 5f       	subi	r22, 0xF4	; 244
  a0:	7f 4f       	sbci	r23, 0xFF	; 255
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 00 00 	call	0	; 0x0 <xTaskNotifyFromISR>
  aa:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  ae:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  b2:	9e 89       	ldd	r25, Y+22	; 0x16
  b4:	86 89       	ldd	r24, Z+22	; 0x16
  b6:	89 17       	cp	r24, r25
  b8:	00 f4       	brcc	.+0      	; 0xba <xTaskNotifyFromISR+0xba>
  ba:	01 15       	cp	r16, r1
  bc:	11 05       	cpc	r17, r1
  be:	01 f0       	breq	.+0      	; 0xc0 <xTaskNotifyFromISR+0xc0>
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	f8 01       	movw	r30, r16
  c4:	80 83       	st	Z, r24
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <xTaskNotifyFromISR+0xc8>
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	1f 91       	pop	r17
  d0:	0f 91       	pop	r16
  d2:	ff 90       	pop	r15
  d4:	ef 90       	pop	r14
  d6:	08 95       	ret

Disassembly of section .text.vTaskNotifyGiveFromISR:

00000000 <vTaskNotifyGiveFromISR>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	fc 01       	movw	r30, r24
   e:	25 a1       	ldd	r18, Z+37	; 0x25
  10:	82 e0       	ldi	r24, 0x02	; 2
  12:	85 a3       	std	Z+37, r24	; 0x25
  14:	81 a1       	ldd	r24, Z+33	; 0x21
  16:	92 a1       	ldd	r25, Z+34	; 0x22
  18:	a3 a1       	ldd	r26, Z+35	; 0x23
  1a:	b4 a1       	ldd	r27, Z+36	; 0x24
  1c:	01 96       	adiw	r24, 0x01	; 1
  1e:	a1 1d       	adc	r26, r1
  20:	b1 1d       	adc	r27, r1
  22:	81 a3       	std	Z+33, r24	; 0x21
  24:	92 a3       	std	Z+34, r25	; 0x22
  26:	a3 a3       	std	Z+35, r26	; 0x23
  28:	b4 a3       	std	Z+36, r27	; 0x24
  2a:	21 30       	cpi	r18, 0x01	; 1
  2c:	01 f4       	brne	.+0      	; 0x2e <vTaskNotifyGiveFromISR+0x2e>
  2e:	8b 01       	movw	r16, r22
  30:	ef 01       	movw	r28, r30
  32:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  36:	81 11       	cpse	r24, r1
  38:	00 c0       	rjmp	.+0      	; 0x3a <vTaskNotifyGiveFromISR+0x3a>
  3a:	7f 01       	movw	r14, r30
  3c:	22 e0       	ldi	r18, 0x02	; 2
  3e:	e2 0e       	add	r14, r18
  40:	f1 1c       	adc	r15, r1
  42:	c7 01       	movw	r24, r14
  44:	0e 94 00 00 	call	0	; 0x0 <vTaskNotifyGiveFromISR>
  48:	8e 89       	ldd	r24, Y+22	; 0x16
  4a:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  4e:	98 17       	cp	r25, r24
  50:	00 f4       	brcc	.+0      	; 0x52 <vTaskNotifyGiveFromISR+0x52>
  52:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  56:	e9 e0       	ldi	r30, 0x09	; 9
  58:	8e 9f       	mul	r24, r30
  5a:	c0 01       	movw	r24, r0
  5c:	11 24       	eor	r1, r1
  5e:	b7 01       	movw	r22, r14
  60:	80 50       	subi	r24, 0x00	; 0
  62:	90 40       	sbci	r25, 0x00	; 0
  64:	00 c0       	rjmp	.+0      	; 0x66 <vTaskNotifyGiveFromISR+0x66>
  66:	bf 01       	movw	r22, r30
  68:	64 5f       	subi	r22, 0xF4	; 244
  6a:	7f 4f       	sbci	r23, 0xFF	; 255
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	0e 94 00 00 	call	0	; 0x0 <vTaskNotifyGiveFromISR>
  74:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  78:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  7c:	9e 89       	ldd	r25, Y+22	; 0x16
  7e:	86 89       	ldd	r24, Z+22	; 0x16
  80:	89 17       	cp	r24, r25
  82:	00 f4       	brcc	.+0      	; 0x84 <vTaskNotifyGiveFromISR+0x84>
  84:	01 15       	cp	r16, r1
  86:	11 05       	cpc	r17, r1
  88:	01 f0       	breq	.+0      	; 0x8a <vTaskNotifyGiveFromISR+0x8a>
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	f8 01       	movw	r30, r16
  8e:	80 83       	st	Z, r24
  90:	df 91       	pop	r29
  92:	cf 91       	pop	r28
  94:	1f 91       	pop	r17
  96:	0f 91       	pop	r16
  98:	ff 90       	pop	r15
  9a:	ef 90       	pop	r14
  9c:	08 95       	ret

timers.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .comment      00000012  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY
